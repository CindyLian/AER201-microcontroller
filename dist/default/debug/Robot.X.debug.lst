

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 28 14:44:50 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 1.40
    39                           ; Generated 01/12/2016 GMT
    40                           ; 
    41                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _keys:
    78                           	opt stack 0
    79  001001  31                 	db	49
    80  001002  32                 	db	50
    81  001003  33                 	db	51
    82  001004  41                 	db	65
    83  001005  34                 	db	52
    84  001006  35                 	db	53
    85  001007  36                 	db	54
    86  001008  42                 	db	66
    87  001009  37                 	db	55
    88  00100A  38                 	db	56
    89  00100B  39                 	db	57
    90  00100C  43                 	db	67
    91  00100D  2A                 	db	42
    92  00100E  30                 	db	48
    93  00100F  23                 	db	35
    94  001010  44                 	db	68
    95  001011  00                 	db	0
    96  001012                     __end_of_keys:
    97                           	opt stack 0
    98  001012                     _dpowers:
    99                           	opt stack 0
   100  001012  0001               	dw	1
   101  001014  000A               	dw	10
   102  001016  0064               	dw	100
   103  001018  03E8               	dw	1000
   104  00101A  2710               	dw	10000
   105  00101C                     __end_of_dpowers:
   106                           	opt stack 0
   107  00101C                     _itemArray:
   108                           	opt stack 0
   109  00101C  31                 	db	49
   110  00101D  32                 	db	50
   111  00101E  33                 	db	51
   112  00101F  34                 	db	52
   113  001020  35                 	db	53
   114  001021  00                 	db	0
   115  001022                     __end_of_itemArray:
   116                           	opt stack 0
   117  0000                     _LATAbits	set	3977
   118  0000                     _LATCbits	set	3979
   119  0000                     _LATD	set	3980
   120  0000                     _LATDbits	set	3980
   121  0000                     _PORTAbits	set	3968
   122  0000                     _PORTB	set	3969
   123  0000                     _PORTBbits	set	3969
   124  0000                     _TRISA	set	3986
   125  0000                     _TRISB	set	3987
   126  0000                     _TRISC	set	3988
   127  0000                     _TRISD	set	3989
   128  0000                     _TRISE	set	3990
   129  0000                     _ADCON0	set	4034
   130  0000                     _ADCON0bits	set	4034
   131  0000                     _ADCON1	set	4033
   132  0000                     _ADRESH	set	4036
   133  0000                     _ADRESL	set	4035
   134  0000                     _T1CON	set	4045
   135  0000                     _TMR1H	set	4047
   136  0000                     _TMR1L	set	4046
   137  0000                     _TMR1ON	set	32360
   138  0000                     _T0CON	set	4053
   139  0000                     _TMR0H	set	4055
   140  0000                     _TMR0L	set	4054
   141  0000                     _TMR0ON	set	32431
   142  0000                     _INTCONbits	set	4082
   143  0000                     _INT1IE	set	32643
   144  0000                     _INT1IF	set	32640
   145  001022                     STR_3:
   146  001022  65                 	db	101	;'e'
   147  001023  63                 	db	99	;'c'
   148  001024  3A                 	db	58	;':'
   149  001025  25                 	db	37
   150  001026  64                 	db	100	;'d'
   151  001027  65                 	db	101	;'e'
   152  001028  6E                 	db	110	;'n'
   153  001029  3A                 	db	58	;':'
   154  00102A  25                 	db	37
   155  00102B  64                 	db	100	;'d'
   156  00102C  79                 	db	121	;'y'
   157  00102D  63                 	db	99	;'c'
   158  00102E  3A                 	db	58	;':'
   159  00102F  25                 	db	37
   160  001030  64                 	db	100	;'d'
   161  001031  79                 	db	121	;'y'
   162  001032  6E                 	db	110	;'n'
   163  001033  3A                 	db	58	;':'
   164  001034  25                 	db	37
   165  001035  64                 	db	100	;'d'
   166  001036  00                 	db	0
   167  001037                     STR_5:
   168  001037  74                 	db	116	;'t'
   169  001038  69                 	db	105	;'i'
   170  001039  6D                 	db	109	;'m'
   171  00103A  65                 	db	101	;'e'
   172  00103B  20                 	db	32
   173  00103C  65                 	db	101	;'e'
   174  00103D  6C                 	db	108	;'l'
   175  00103E  61                 	db	97	;'a'
   176  00103F  70                 	db	112	;'p'
   177  001040  73                 	db	115	;'s'
   178  001041  65                 	db	101	;'e'
   179  001042  64                 	db	100	;'d'
   180  001043  3A                 	db	58	;':'
   181  001044  20                 	db	32
   182  001045  25                 	db	37
   183  001046  64                 	db	100	;'d'
   184  001047  00                 	db	0
   185  001048                     STR_1:
   186  001048  31                 	db	49	;'1'
   187  001049  3A                 	db	58	;':'
   188  00104A  53                 	db	83	;'S'
   189  00104B  74                 	db	116	;'t'
   190  00104C  61                 	db	97	;'a'
   191  00104D  72                 	db	114	;'r'
   192  00104E  74                 	db	116	;'t'
   193  00104F  3B                 	db	59	;';'
   194  001050  20                 	db	32
   195  001051  32                 	db	50	;'2'
   196  001052  3A                 	db	58	;':'
   197  001053  4C                 	db	76	;'L'
   198  001054  6F                 	db	111	;'o'
   199  001055  67                 	db	103	;'g'
   200  001056  73                 	db	115	;'s'
   201  001057  00                 	db	0
   202  001058                     STR_2:
   203  001058  3C                 	db	60	;'<'
   204  001059  53                 	db	83	;'S'
   205  00105A  6F                 	db	111	;'o'
   206  00105B  72                 	db	114	;'r'
   207  00105C  74                 	db	116	;'t'
   208  00105D  69                 	db	105	;'i'
   209  00105E  6E                 	db	110	;'n'
   210  00105F  67                 	db	103	;'g'
   211  001060  3E                 	db	62	;'>'
   212  001061  00                 	db	0
   213  001062                     STR_7:
   214  001062  49                 	db	73	;'I'
   215  001063  74                 	db	116	;'t'
   216  001064  65                 	db	101	;'e'
   217  001065  6D                 	db	109	;'m'
   218  001066  3A                 	db	58	;':'
   219  001067  20                 	db	32
   220  001068  25                 	db	37
   221  001069  63                 	db	99	;'c'
   222  00106A  00                 	db	0
   223  00106B                     STR_9:
   224  00106B  45                 	db	69	;'E'
   225  00106C  78                 	db	120	;'x'
   226  00106D  69                 	db	105	;'i'
   227  00106E  74                 	db	116	;'t'
   228  00106F  00                 	db	0
   229  001070                     STR_4:
   230  001070  31                 	db	49	;'1'
   231  001071  00                 	db	0
   232  0000                     
   233                           ; #config settings
   234  001072  00                 	db	0	; dummy byte at the end
   235  0000                     
   236                           	psect	cinit
   237  001F64                     __pcinit:
   238                           	opt stack 0
   239  001F64                     start_initialization:
   240                           	opt stack 0
   241  001F64                     __initialization:
   242                           	opt stack 0
   243                           
   244                           ; Clear objects allocated to COMRAM (10 bytes)
   245  001F64  EE00  F05F         	lfsr	0,__pbssCOMRAM
   246  001F68  0E0A               	movlw	10
   247  001F6A                     clear_0:
   248  001F6A  6AEE               	clrf	postinc0,c
   249  001F6C  06E8               	decf	wreg,f,c
   250  001F6E  E1FD               	bnz	clear_0
   251  001F70                     end_of_initialization:
   252                           	opt stack 0
   253  001F70                     __end_of__initialization:
   254                           	opt stack 0
   255  001F70  9069               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   256  001F72  9269               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   257  001F74  0E00               	movlw	low (__Lmediumconst shr (0+16))
   258  001F76  6EF8               	movwf	tblptru,c
   259  001F78  0100               	movlb	0
   260  001F7A  EF60  F00D         	goto	_main	;jump to C main() function
   261                           tblptru	equ	0xFF8
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           
   265                           	psect	bssCOMRAM
   266  00005F                     __pbssCOMRAM:
   267                           	opt stack 0
   268  00005F                     _eskaCap:
   269                           	opt stack 0
   270  00005F                     	ds	2
   271  000061                     _eskaNoCap:
   272                           	opt stack 0
   273  000061                     	ds	2
   274  000063                     _time:
   275                           	opt stack 0
   276  000063                     	ds	2
   277  000065                     _yopCap:
   278                           	opt stack 0
   279  000065                     	ds	2
   280  000067                     _yopNoCap:
   281                           	opt stack 0
   282  000067                     	ds	2
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	cstackCOMRAM
   288  000001                     __pcstackCOMRAM:
   289                           	opt stack 0
   290  000001                     ??_keypressed:
   291  000001                     
   292                           ; 1 bytes @ 0x0
   293  000001                     	ds	14
   294  00000F                     keypressed@keypress:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0xE
   298  00000F                     	ds	1
   299  000010                     ?_ADC_Read:
   300                           	opt stack 0
   301  000010                     ?___ftpack:
   302                           	opt stack 0
   303  000010                     lcdNibble@temp:
   304                           	opt stack 0
   305  000010                     rotate@degree:
   306                           	opt stack 0
   307  000010                     ___ftpack@arg:
   308                           	opt stack 0
   309  000010                     ___ftge@ff1:
   310                           	opt stack 0
   311                           
   312                           ; 3 bytes @ 0xF
   313  000010                     	ds	1
   314  000011                     lcdNibble@data:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0x10
   318  000011                     	ds	1
   319  000012                     ??_rotate:
   320  000012                     ??_ADC_Read:
   321  000012                     lcdInst@data:
   322                           	opt stack 0
   323  000012                     putch@data:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x11
   327  000012                     	ds	1
   328  000013                     ??_initLCD:
   329  000013                     ___ftpack@exp:
   330                           	opt stack 0
   331  000013                     putStr@ptr:
   332                           	opt stack 0
   333  000013                     rotate@j:
   334                           	opt stack 0
   335  000013                     ___ftge@ff2:
   336                           	opt stack 0
   337                           
   338                           ; 3 bytes @ 0x12
   339  000013                     	ds	1
   340  000014                     ADC_Read@channel:
   341                           	opt stack 0
   342  000014                     ___ftpack@sign:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x13
   346  000014                     	ds	1
   347  000015                     ??___ftpack:
   348  000015                     ?___lwdiv:
   349                           	opt stack 0
   350  000015                     rotate@i:
   351                           	opt stack 0
   352  000015                     ___lwdiv@dividend:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x14
   356  000015                     	ds	1
   357  000016                     ??___ftge:
   358                           
   359                           ; 1 bytes @ 0x15
   360  000016                     	ds	1
   361  000017                     ___lwdiv@divisor:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x16
   365  000017                     	ds	1
   366  000018                     ?___awtoft:
   367                           	opt stack 0
   368  000018                     ___awtoft@c:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x17
   372  000018                     	ds	1
   373  000019                     ___lwdiv@quotient:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x18
   377  000019                     	ds	2
   378  00001B                     ___awtoft@sign:
   379                           	opt stack 0
   380  00001B                     ___lwdiv@counter:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x1A
   384  00001B                     	ds	1
   385  00001C                     ?___lwmod:
   386                           	opt stack 0
   387  00001C                     ?___ftdiv:
   388                           	opt stack 0
   389  00001C                     ?___lwtoft:
   390                           	opt stack 0
   391  00001C                     ___lwmod@dividend:
   392                           	opt stack 0
   393  00001C                     ___lwtoft@c:
   394                           	opt stack 0
   395  00001C                     ___ftdiv@f1:
   396                           	opt stack 0
   397                           
   398                           ; 3 bytes @ 0x1B
   399  00001C                     	ds	2
   400  00001E                     ___lwmod@divisor:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x1D
   404  00001E                     	ds	1
   405  00001F                     ?___ftmul:
   406                           	opt stack 0
   407  00001F                     ___ftdiv@f2:
   408                           	opt stack 0
   409  00001F                     ___ftmul@f1:
   410                           	opt stack 0
   411                           
   412                           ; 3 bytes @ 0x1E
   413  00001F                     	ds	1
   414  000020                     ___lwmod@counter:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x1F
   418  000020                     	ds	1
   419  000021                     ?_printf:
   420                           	opt stack 0
   421  000021                     printf@f:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x20
   425  000021                     	ds	1
   426  000022                     ??___ftdiv:
   427  000022                     ___ftmul@f2:
   428                           	opt stack 0
   429                           
   430                           ; 3 bytes @ 0x21
   431  000022                     	ds	3
   432  000025                     ??___ftmul:
   433  000025                     ___ftdiv@cntr:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x24
   437  000025                     	ds	1
   438  000026                     ___ftdiv@f3:
   439                           	opt stack 0
   440                           
   441                           ; 3 bytes @ 0x25
   442  000026                     	ds	2
   443  000028                     ___ftmul@exp:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x27
   447  000028                     	ds	1
   448  000029                     ___ftdiv@exp:
   449                           	opt stack 0
   450  000029                     ___ftmul@f3_as_product:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x28
   454  000029                     	ds	1
   455  00002A                     ___ftdiv@sign:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x29
   459  00002A                     	ds	1
   460  00002B                     ??_printf:
   461  00002B                     ?___fttol:
   462                           	opt stack 0
   463  00002B                     ___fttol@f1:
   464                           	opt stack 0
   465                           
   466                           ; 3 bytes @ 0x2A
   467  00002B                     	ds	1
   468  00002C                     printf@flag:
   469                           	opt stack 0
   470  00002C                     ___ftmul@cntr:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x2B
   474  00002C                     	ds	1
   475  00002D                     printf@prec:
   476                           	opt stack 0
   477  00002D                     ___ftmul@sign:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0x2C
   481  00002D                     	ds	1
   482  00002E                     printf@ap:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x2D
   486  00002E                     	ds	1
   487  00002F                     ??___fttol:
   488                           
   489                           ; 1 bytes @ 0x2E
   490  00002F                     	ds	1
   491  000030                     printf@val:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x2F
   495  000030                     	ds	2
   496  000032                     printf@c:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x31
   500  000032                     	ds	1
   501  000033                     ??_showLogMenu:
   502  000033                     displayLog@eskaCap:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x32
   506  000033                     	ds	1
   507  000034                     ___fttol@sign1:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x33
   511  000034                     	ds	1
   512  000035                     showLogMenu@press1:
   513                           	opt stack 0
   514  000035                     displayLog@eskaNoCap:
   515                           	opt stack 0
   516  000035                     ___fttol@lval:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x34
   520  000035                     	ds	1
   521  000036                     showLogMenu@temp2:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x35
   525  000036                     	ds	1
   526  000037                     displayLog@yopCap:
   527                           	opt stack 0
   528  000037                     showLogMenu@pointer:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x36
   532  000037                     	ds	2
   533  000039                     ___fttol@exp1:
   534                           	opt stack 0
   535  000039                     displayLog@yopNoCap:
   536                           	opt stack 0
   537  000039                     showLogMenu@topItem:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x38
   541  000039                     	ds	1
   542  00003A                     ?_ultrasonicFindBottle:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x39
   546  00003A                     	ds	1
   547  00003B                     displayLog@time:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x3A
   551  00003B                     	ds	1
   552  00003C                     ??_ultrasonicFindBottle:
   553                           
   554                           ; 1 bytes @ 0x3B
   555  00003C                     	ds	1
   556  00003D                     
   557                           ; 1 bytes @ 0x3C
   558  00003D                     	ds	3
   559  000040                     ultrasonicFindBottle@a:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x3F
   563  000040                     	ds	2
   564  000042                     ??_sort:
   565                           
   566                           ; 1 bytes @ 0x41
   567  000042                     	ds	4
   568  000046                     sort@currentContainer:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x45
   572  000046                     	ds	2
   573  000048                     sort@proxVolt:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x47
   577  000048                     	ds	3
   578  00004B                     sort@lightVolt:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x4A
   582  00004B                     	ds	3
   583  00004E                     sort@lightSensor:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x4D
   587  00004E                     	ds	2
   588  000050                     sort@microswitch:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x4F
   592  000050                     	ds	2
   593  000052                     sort@proxSensor:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x51
   597  000052                     	ds	2
   598  000054                     sort@i:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x53
   602  000054                     	ds	1
   603  000055                     sort@i_624:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x54
   607  000055                     	ds	1
   608  000056                     sort@i_625:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x55
   612  000056                     	ds	1
   613  000057                     sort@i_634:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x56
   617  000057                     	ds	1
   618  000058                     sort@i_640:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x57
   622  000058                     	ds	1
   623  000059                     sort@i_641:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x58
   627  000059                     	ds	1
   628  00005A                     sort@bottle:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x59
   632  00005A                     	ds	2
   633  00005C                     sort@i_639:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x5B
   637  00005C                     	ds	2
   638  00005E                     main@keypress:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x5D
   642  00005E                     	ds	1
   643                           tblptru	equ	0xFF8
   644                           postinc0	equ	0xFEE
   645                           wreg	equ	0xFE8
   646                           
   647 ;;
   648 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   649 ;;
   650 ;; *************** function _main *****************
   651 ;; Defined at:
   652 ;;		line 19 in file "main.c"
   653 ;; Parameters:    Size  Location     Type
   654 ;;		None
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  keypress        1   93[COMRAM] unsigned char 
   657 ;; Return value:  Size  Location     Type
   658 ;;                  1    wreg      void 
   659 ;; Registers used:
   660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   661 ;; Tracked objects:
   662 ;;		On entry : 0/0
   663 ;;		On exit  : 0/0
   664 ;;		Unchanged: 0/0
   665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   669 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   670 ;;Total ram usage:        1 bytes
   671 ;; Hardware stack levels required when called:    6
   672 ;; This function calls:
   673 ;;		_initLCD
   674 ;;		_putStr
   675 ;;		_showLogMenu
   676 ;;		_sort
   677 ;; This function is called by:
   678 ;;		Startup code after reset
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text0
   683  001AC0                     __ptext0:
   684                           	opt stack 0
   685  001AC0                     _main:
   686                           	opt stack 25
   687                           
   688                           ;main.c: 20: TRISA = 0xFF;
   689                           
   690                           ;incstack = 0
   691  001AC0  6892               	setf	3986,c	;volatile
   692                           
   693                           ;main.c: 21: TRISB = 0xFF;
   694  001AC2  6893               	setf	3987,c	;volatile
   695                           
   696                           ;main.c: 22: TRISC = 0x00;
   697  001AC4  0E00               	movlw	0
   698  001AC6  6E94               	movwf	3988,c	;volatile
   699                           
   700                           ;main.c: 23: TRISD = 0x00;
   701  001AC8  0E00               	movlw	0
   702  001ACA  6E95               	movwf	3989,c	;volatile
   703                           
   704                           ;main.c: 24: TRISE = 0b00000010;
   705  001ACC  0E02               	movlw	2
   706  001ACE  6E96               	movwf	3990,c	;volatile
   707                           
   708                           ;main.c: 26: T1CON = 0x10;
   709  001AD0  0E10               	movlw	16
   710  001AD2  6ECD               	movwf	4045,c	;volatile
   711                           
   712                           ;main.c: 27: T0CON = 0x80;
   713  001AD4  0E80               	movlw	128
   714  001AD6  6ED5               	movwf	4053,c	;volatile
   715                           
   716                           ;main.c: 29: ADCON0 = 0x81;
   717  001AD8  0E81               	movlw	129
   718  001ADA  6EC2               	movwf	4034,c	;volatile
   719                           
   720                           ;main.c: 30: ADCON1 = 0x0D;
   721  001ADC  0E0D               	movlw	13
   722  001ADE  6EC1               	movwf	4033,c	;volatile
   723                           
   724                           ;main.c: 31: INT1IE = 1;
   725  001AE0  86F0               	bsf	intcon3,3,c	;volatile
   726  001AE2                     l2215:
   727                           
   728                           ;main.c: 34: {
   729                           ;main.c: 35: initLCD();
   730  001AE2  EC16  F00F         	call	_initLCD	;wreg free
   731                           
   732                           ;main.c: 36: putStr("1:Start; 2:Logs");
   733  001AE6  0E48               	movlw	low STR_1
   734  001AE8  6E13               	movwf	putStr@ptr,c
   735  001AEA  0E10               	movlw	high STR_1
   736  001AEC  6E14               	movwf	putStr@ptr+1,c
   737  001AEE  EC8B  F00F         	call	_putStr	;wreg free
   738  001AF2                     l44:
   739  001AF2  A281               	btfss	3969,1,c	;volatile
   740  001AF4  D7FE               	goto	l44
   741                           
   742                           ;main.c: 41: }
   743                           ;main.c: 42: unsigned char keypress = (PORTB & 0xF0) >> 4;
   744  001AF6  3881               	swapf	3969,w,c	;volatile
   745  001AF8  0B0F               	andlw	15
   746  001AFA  0B0F               	andlw	15
   747  001AFC  6E5E               	movwf	main@keypress,c
   748  001AFE                     l47:
   749  001AFE  B281               	btfsc	3969,1,c	;volatile
   750  001B00  D7FE               	goto	l47
   751                           
   752                           ;main.c: 44: }
   753                           ;main.c: 46: __nop();
   754  001B02  F000               	nop	
   755                           
   756                           ;main.c: 47: __nop();
   757  001B04  F000               	nop	
   758                           
   759                           ;main.c: 49: if (keys[keypress] == '1'){
   760  001B06  505E               	movf	main@keypress,w,c
   761  001B08  0D01               	mullw	1
   762  001B0A  0E01               	movlw	low _keys
   763  001B0C  24F3               	addwf	prodl,w,c
   764  001B0E  6EF6               	movwf	tblptrl,c
   765  001B10  0E10               	movlw	high _keys
   766  001B12  20F4               	addwfc	prodh,w,c
   767  001B14  6EF7               	movwf	tblptrh,c
   768  001B16                     	if	0	;There are less than 3 active tblptr bytes
   769  001B16                     	endif
   770  001B16  0008               	tblrd		*
   771  001B18  50F5               	movf	tablat,w,c
   772  001B1A  0A31               	xorlw	49
   773  001B1C  A4D8               	btfss	status,2,c
   774  001B1E  D00C               	goto	l2233
   775                           
   776                           ;main.c: 50: initLCD();
   777  001B20  EC16  F00F         	call	_initLCD	;wreg free
   778                           
   779                           ;main.c: 51: putStr("<Sorting>");
   780  001B24  0E58               	movlw	low STR_2
   781  001B26  6E13               	movwf	putStr@ptr,c
   782  001B28  0E10               	movlw	high STR_2
   783  001B2A  6E14               	movwf	putStr@ptr+1,c
   784  001B2C  EC8B  F00F         	call	_putStr	;wreg free
   785                           
   786                           ;main.c: 52: (INTCONbits.GIE = 1);
   787  001B30  8EF2               	bsf	intcon,7,c	;volatile
   788                           
   789                           ;main.c: 53: sort();
   790  001B32  EC3A  F008         	call	_sort	;wreg free
   791  001B36  D012               	goto	l2241
   792  001B38                     l2233:
   793  001B38  505E               	movf	main@keypress,w,c
   794  001B3A  0D01               	mullw	1
   795  001B3C  0E01               	movlw	low _keys
   796  001B3E  24F3               	addwf	prodl,w,c
   797  001B40  6EF6               	movwf	tblptrl,c
   798  001B42  0E10               	movlw	high _keys
   799  001B44  20F4               	addwfc	prodh,w,c
   800  001B46  6EF7               	movwf	tblptrh,c
   801  001B48                     	if	0	;There are less than 3 active tblptr bytes
   802  001B48                     	endif
   803  001B48  0008               	tblrd		*
   804  001B4A  50F5               	movf	tablat,w,c
   805  001B4C  0A32               	xorlw	50
   806  001B4E  A4D8               	btfss	status,2,c
   807  001B50  D7C8               	goto	l2215
   808                           
   809                           ;main.c: 56: initLCD();
   810  001B52  EC16  F00F         	call	_initLCD	;wreg free
   811                           
   812                           ;main.c: 57: (INTCONbits.GIE = 1);
   813  001B56  8EF2               	bsf	intcon,7,c	;volatile
   814                           
   815                           ;main.c: 58: showLogMenu();
   816  001B58  ECE9  F009         	call	_showLogMenu	;wreg free
   817  001B5C                     l2241:
   818                           
   819                           ;main.c: 59: (INTCONbits.GIE = 0);
   820  001B5C  9EF2               	bcf	intcon,7,c	;volatile
   821  001B5E  D7C1               	goto	l2215
   822  001B60                     __end_of_main:
   823                           	opt stack 0
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           prodh	equ	0xFF4
   829                           prodl	equ	0xFF3
   830                           intcon	equ	0xFF2
   831                           intcon3	equ	0xFF0
   832                           postinc0	equ	0xFEE
   833                           wreg	equ	0xFE8
   834                           status	equ	0xFD8
   835                           
   836 ;; *************** function _sort *****************
   837 ;; Defined at:
   838 ;;		line 102 in file "start.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  i               1   86[COMRAM] unsigned char 
   843 ;;  i               1   85[COMRAM] unsigned char 
   844 ;;  i               1   84[COMRAM] unsigned char 
   845 ;;  i               1   83[COMRAM] unsigned char 
   846 ;;  i               1   88[COMRAM] unsigned char 
   847 ;;  i               1   87[COMRAM] unsigned char 
   848 ;;  lightVolt       3   74[COMRAM] float 
   849 ;;  proxVolt        3   71[COMRAM] float 
   850 ;;  i               2   91[COMRAM] unsigned int 
   851 ;;  bottle          2   89[COMRAM] int 
   852 ;;  proxSensor      2   81[COMRAM] int 
   853 ;;  microswitch     2   79[COMRAM] int 
   854 ;;  lightSensor     2   77[COMRAM] int 
   855 ;;  currentConta    2   69[COMRAM] int 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   866 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   867 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   868 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   869 ;;Total ram usage:       28 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    5
   872 ;; This function calls:
   873 ;;		_ADC_Read
   874 ;;		___ftge
   875 ;;		___ftmul
   876 ;;		___lwdiv
   877 ;;		___lwtoft
   878 ;;		_displayLog
   879 ;;		_lcdInst
   880 ;;		_printf
   881 ;;		_resetCounts
   882 ;;		_rotate
   883 ;;		_ultrasonicFindBottle
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text1
   890  001074                     __ptext1:
   891                           	opt stack 0
   892  001074                     _sort:
   893                           	opt stack 25
   894                           
   895                           ;start.c: 104: int microswitch;
   896                           ;start.c: 105: int proxSensor;
   897                           ;start.c: 106: int lightSensor;
   898                           ;start.c: 107: int bottle;
   899                           ;start.c: 108: int currentContainer = 0;
   900                           
   901                           ;incstack = 0
   902  001074  0E00               	movlw	0
   903  001076  6E47               	movwf	sort@currentContainer+1,c
   904  001078  0E00               	movlw	0
   905  00107A  6E46               	movwf	sort@currentContainer,c
   906                           
   907                           ;start.c: 110: TMR0H = 0;
   908  00107C  0E00               	movlw	0
   909  00107E  6ED7               	movwf	4055,c	;volatile
   910                           
   911                           ;start.c: 111: TMR0L = 0;
   912  001080  0E00               	movlw	0
   913  001082  6ED6               	movwf	4054,c	;volatile
   914                           
   915                           ;start.c: 114: resetCounts ();
   916  001084  EC76  F00F         	call	_resetCounts	;wreg free
   917                           
   918                           ;start.c: 116: TMR0ON = 1;
   919  001088  8ED5               	bsf	4053,7,c	;volatile
   920  00108A                     l1999:
   921                           
   922                           ;start.c: 119: {
   923                           ;start.c: 120: lcdInst(0b11000000);
   924  00108A  0EC0               	movlw	192
   925  00108C  ECBF  F00F         	call	_lcdInst
   926                           
   927                           ;start.c: 121: printf("ec:%den:%dyc:%dyn:%d", eskaCap, eskaNoCap, yopCap, yopNoCap);
   928  001090  0E22               	movlw	low STR_3
   929  001092  6E21               	movwf	printf@f,c
   930  001094  0E10               	movlw	high STR_3
   931  001096  6E22               	movwf	printf@f+1,c
   932  001098  C05F  F023         	movff	_eskaCap,?_printf+2
   933  00109C  C060  F024         	movff	_eskaCap+1,?_printf+3
   934  0010A0  C061  F025         	movff	_eskaNoCap,?_printf+4
   935  0010A4  C062  F026         	movff	_eskaNoCap+1,?_printf+5
   936  0010A8  C065  F027         	movff	_yopCap,?_printf+6
   937  0010AC  C066  F028         	movff	_yopCap+1,?_printf+7
   938  0010B0  C067  F029         	movff	_yopNoCap,?_printf+8
   939  0010B4  C068  F02A         	movff	_yopNoCap+1,?_printf+9
   940  0010B8  EC8A  F00A         	call	_printf	;wreg free
   941                           
   942                           ;start.c: 123: LATDbits.LATD0 = 1;
   943  0010BC  808C               	bsf	3980,0,c	;volatile
   944                           
   945                           ;start.c: 125: LATCbits.LATC1 = 1;
   946  0010BE  828B               	bsf	3979,1,c	;volatile
   947  0010C0                     l2007:
   948  0010C0  EC1F  F00C         	call	_ultrasonicFindBottle	;wreg free
   949  0010C4  503A               	movf	?_ultrasonicFindBottle,w,c
   950  0010C6  103B               	iorwf	?_ultrasonicFindBottle+1,w,c
   951  0010C8  B4D8               	btfsc	status,2,c
   952  0010CA  D7FA               	goto	l2007
   953                           
   954                           ;start.c: 129: lcdInst (0b10000000);
   955  0010CC  0E80               	movlw	128
   956  0010CE  ECBF  F00F         	call	_lcdInst
   957                           
   958                           ;start.c: 130: printf ("1");
   959  0010D2  0E70               	movlw	low STR_4
   960  0010D4  6E21               	movwf	printf@f,c
   961  0010D6  0E10               	movlw	high STR_4
   962  0010D8  6E22               	movwf	printf@f+1,c
   963  0010DA  EC8A  F00A         	call	_printf	;wreg free
   964                           
   965                           ;start.c: 132: LATCbits.LATC1 = 0;
   966  0010DE  928B               	bcf	3979,1,c	;volatile
   967                           
   968                           ;start.c: 134: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
   969  0010E0  0E00               	movlw	0
   970  0010E2  6E54               	movwf	sort@i,c
   971  0010E4                     l2017:
   972  0010E4  0E63               	movlw	99
   973  0010E6  6454               	cpfsgt	sort@i,c
   974  0010E8  D001               	goto	l2021
   975  0010EA  D00A               	goto	l177
   976  0010EC                     l2021:
   977  0010EC  0E1A               	movlw	26
   978  0010EE  6E42               	movwf	??_sort& (0+255),c
   979  0010F0  0EF8               	movlw	248
   980  0010F2                     u1977:
   981  0010F2  2EE8               	decfsz	wreg,f,c
   982  0010F4  D7FE               	bra	u1977
   983  0010F6  2E42               	decfsz	??_sort& (0+255),f,c
   984  0010F8  D7FC               	bra	u1977
   985  0010FA  D000               	nop2	
   986  0010FC  2A54               	incf	sort@i,f,c
   987  0010FE  D7F2               	goto	l2017
   988  001100                     l177:
   989                           
   990                           ;start.c: 136: LATDbits.LATD0 = 0;
   991  001100  908C               	bcf	3980,0,c	;volatile
   992                           
   993                           ;start.c: 139: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
   994  001102  0E00               	movlw	0
   995  001104  6E55               	movwf	sort@i_624,c
   996  001106                     l2027:
   997  001106  0E63               	movlw	99
   998  001108  6455               	cpfsgt	sort@i_624,c
   999  00110A  D001               	goto	l2031
  1000  00110C  D00A               	goto	l2035
  1001  00110E                     l2031:
  1002  00110E  0E1A               	movlw	26
  1003  001110  6E42               	movwf	??_sort& (0+255),c
  1004  001112  0EF8               	movlw	248
  1005  001114                     u1987:
  1006  001114  2EE8               	decfsz	wreg,f,c
  1007  001116  D7FE               	bra	u1987
  1008  001118  2E42               	decfsz	??_sort& (0+255),f,c
  1009  00111A  D7FC               	bra	u1987
  1010  00111C  D000               	nop2	
  1011  00111E  2A55               	incf	sort@i_624,f,c
  1012  001120  D7F2               	goto	l2027
  1013  001122                     l2035:
  1014                           
  1015                           ;start.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
  1016  001122  0E00               	movlw	0
  1017  001124  6E56               	movwf	sort@i_625,c
  1018  001126                     l2037:
  1019  001126  0E63               	movlw	99
  1020  001128  6456               	cpfsgt	sort@i_625,c
  1021  00112A  D001               	goto	l2041
  1022  00112C  D00A               	goto	l181
  1023  00112E                     l2041:
  1024  00112E  0E1A               	movlw	26
  1025  001130  6E42               	movwf	??_sort& (0+255),c
  1026  001132  0EF8               	movlw	248
  1027  001134                     u1997:
  1028  001134  2EE8               	decfsz	wreg,f,c
  1029  001136  D7FE               	bra	u1997
  1030  001138  2E42               	decfsz	??_sort& (0+255),f,c
  1031  00113A  D7FC               	bra	u1997
  1032  00113C  D000               	nop2	
  1033  00113E  2A56               	incf	sort@i_625,f,c
  1034  001140  D7F2               	goto	l2037
  1035  001142                     l181:
  1036                           
  1037                           ;start.c: 143: LATCbits.LATC0 = 1;
  1038  001142  808B               	bsf	3979,0,c	;volatile
  1039                           
  1040                           ;start.c: 144: LATCbits.LATC2 = 1;
  1041  001144  848B               	bsf	3979,2,c	;volatile
  1042                           
  1043                           ;start.c: 145: LATCbits.LATC5 = 1;
  1044  001146  8A8B               	bsf	3979,5,c	;volatile
  1045                           
  1046                           ;start.c: 148: if (!PORTAbits.RA4){
  1047  001148  B880               	btfsc	3968,4,c	;volatile
  1048  00114A  D01A               	goto	l2059
  1049                           
  1050                           ;start.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
  1051  00114C  0E00               	movlw	0
  1052  00114E  6E57               	movwf	sort@i_634,c
  1053  001150                     l2047:
  1054  001150  0E63               	movlw	99
  1055  001152  6457               	cpfsgt	sort@i_634,c
  1056  001154  D001               	goto	l2051
  1057  001156  D00A               	goto	l184
  1058  001158                     l2051:
  1059  001158  0E1A               	movlw	26
  1060  00115A  6E42               	movwf	??_sort& (0+255),c
  1061  00115C  0EF8               	movlw	248
  1062  00115E                     u2007:
  1063  00115E  2EE8               	decfsz	wreg,f,c
  1064  001160  D7FE               	bra	u2007
  1065  001162  2E42               	decfsz	??_sort& (0+255),f,c
  1066  001164  D7FC               	bra	u2007
  1067  001166  D000               	nop2	
  1068  001168  2A57               	incf	sort@i_634,f,c
  1069  00116A  D7F2               	goto	l2047
  1070  00116C                     l184:
  1071                           
  1072                           ;start.c: 150: if (!PORTAbits.RA4) microswitch = 0;
  1073  00116C  B880               	btfsc	3968,4,c	;volatile
  1074  00116E  D004               	goto	l2057
  1075  001170  0E00               	movlw	0
  1076  001172  6E51               	movwf	sort@microswitch+1,c
  1077  001174  0E00               	movlw	0
  1078  001176  D003               	goto	L1
  1079  001178                     l2057:
  1080                           
  1081                           ;start.c: 151: else microswitch = 1;
  1082  001178  0E00               	movlw	0
  1083  00117A  6E51               	movwf	sort@microswitch+1,c
  1084  00117C  0E01               	movlw	1
  1085  00117E                     L1:
  1086  00117E  6E50               	movwf	sort@microswitch,c
  1087  001180                     l2059:
  1088                           
  1089                           ;start.c: 152: }
  1090                           ;start.c: 155: float proxVolt = (float)(ADC_Read(1)/1023)*5;
  1091  001180  0E03               	movlw	3
  1092  001182  6E18               	movwf	___lwdiv@divisor+1,c
  1093  001184  6817               	setf	___lwdiv@divisor,c
  1094  001186  0E01               	movlw	1
  1095  001188  ECF2  F00E         	call	_ADC_Read
  1096  00118C  C010  F015         	movff	?_ADC_Read,___lwdiv@dividend
  1097  001190  C011  F016         	movff	?_ADC_Read+1,___lwdiv@dividend+1
  1098  001194  ECA2  F00E         	call	___lwdiv	;wreg free
  1099  001198  C015  F01C         	movff	?___lwdiv,___lwtoft@c
  1100  00119C  C016  F01D         	movff	?___lwdiv+1,___lwtoft@c+1
  1101  0011A0  ECA0  F00F         	call	___lwtoft	;wreg free
  1102  0011A4  C01C  F01F         	movff	?___lwtoft,___ftmul@f1
  1103  0011A8  C01D  F020         	movff	?___lwtoft+1,___ftmul@f1+1
  1104  0011AC  C01E  F021         	movff	?___lwtoft+2,___ftmul@f1+2
  1105  0011B0  0E00               	movlw	0
  1106  0011B2  6E22               	movwf	___ftmul@f2,c
  1107  0011B4  0EA0               	movlw	160
  1108  0011B6  6E23               	movwf	___ftmul@f2+1,c
  1109  0011B8  0E40               	movlw	64
  1110  0011BA  6E24               	movwf	___ftmul@f2+2,c
  1111  0011BC  ECA5  F00B         	call	___ftmul	;wreg free
  1112  0011C0  C01F  F048         	movff	?___ftmul,sort@proxVolt
  1113  0011C4  C020  F049         	movff	?___ftmul+1,sort@proxVolt+1
  1114  0011C8  C021  F04A         	movff	?___ftmul+2,sort@proxVolt+2
  1115                           
  1116                           ;start.c: 156: if (proxVolt > 3) proxSensor = 1;
  1117  0011CC  0E00               	movlw	0
  1118  0011CE  6E10               	movwf	___ftge@ff1,c
  1119  0011D0  0E40               	movlw	64
  1120  0011D2  6E11               	movwf	___ftge@ff1+1,c
  1121  0011D4  0E40               	movlw	64
  1122  0011D6  6E12               	movwf	___ftge@ff1+2,c
  1123  0011D8  C048  F013         	movff	sort@proxVolt,___ftge@ff2
  1124  0011DC  C049  F014         	movff	sort@proxVolt+1,___ftge@ff2+1
  1125  0011E0  C04A  F015         	movff	sort@proxVolt+2,___ftge@ff2+2
  1126  0011E4  ECFF  F00D         	call	___ftge	;wreg free
  1127  0011E8  B0D8               	btfsc	status,0,c
  1128  0011EA  D004               	goto	l2065
  1129  0011EC  0E00               	movlw	0
  1130  0011EE  6E53               	movwf	sort@proxSensor+1,c
  1131  0011F0  0E01               	movlw	1
  1132  0011F2  D003               	goto	L2
  1133  0011F4                     l2065:
  1134                           
  1135                           ;start.c: 157: else proxSensor = 0;
  1136  0011F4  0E00               	movlw	0
  1137  0011F6  6E53               	movwf	sort@proxSensor+1,c
  1138  0011F8  0E00               	movlw	0
  1139  0011FA                     L2:
  1140  0011FA  6E52               	movwf	sort@proxSensor,c
  1141                           
  1142                           ;start.c: 160: float lightVolt = (float)(ADC_Read(0)/1023)*5;
  1143  0011FC  0E03               	movlw	3
  1144  0011FE  6E18               	movwf	___lwdiv@divisor+1,c
  1145  001200  6817               	setf	___lwdiv@divisor,c
  1146  001202  0E00               	movlw	0
  1147  001204  ECF2  F00E         	call	_ADC_Read
  1148  001208  C010  F015         	movff	?_ADC_Read,___lwdiv@dividend
  1149  00120C  C011  F016         	movff	?_ADC_Read+1,___lwdiv@dividend+1
  1150  001210  ECA2  F00E         	call	___lwdiv	;wreg free
  1151  001214  C015  F01C         	movff	?___lwdiv,___lwtoft@c
  1152  001218  C016  F01D         	movff	?___lwdiv+1,___lwtoft@c+1
  1153  00121C  ECA0  F00F         	call	___lwtoft	;wreg free
  1154  001220  C01C  F01F         	movff	?___lwtoft,___ftmul@f1
  1155  001224  C01D  F020         	movff	?___lwtoft+1,___ftmul@f1+1
  1156  001228  C01E  F021         	movff	?___lwtoft+2,___ftmul@f1+2
  1157  00122C  0E00               	movlw	0
  1158  00122E  6E22               	movwf	___ftmul@f2,c
  1159  001230  0EA0               	movlw	160
  1160  001232  6E23               	movwf	___ftmul@f2+1,c
  1161  001234  0E40               	movlw	64
  1162  001236  6E24               	movwf	___ftmul@f2+2,c
  1163  001238  ECA5  F00B         	call	___ftmul	;wreg free
  1164  00123C  C01F  F04B         	movff	?___ftmul,sort@lightVolt
  1165  001240  C020  F04C         	movff	?___ftmul+1,sort@lightVolt+1
  1166  001244  C021  F04D         	movff	?___ftmul+2,sort@lightVolt+2
  1167                           
  1168                           ;start.c: 161: if (lightVolt > 2) lightSensor = 1;
  1169  001248  0E00               	movlw	0
  1170  00124A  6E10               	movwf	___ftge@ff1,c
  1171  00124C  0E00               	movlw	0
  1172  00124E  6E11               	movwf	___ftge@ff1+1,c
  1173  001250  0E40               	movlw	64
  1174  001252  6E12               	movwf	___ftge@ff1+2,c
  1175  001254  C04B  F013         	movff	sort@lightVolt,___ftge@ff2
  1176  001258  C04C  F014         	movff	sort@lightVolt+1,___ftge@ff2+1
  1177  00125C  C04D  F015         	movff	sort@lightVolt+2,___ftge@ff2+2
  1178  001260  ECFF  F00D         	call	___ftge	;wreg free
  1179  001264  B0D8               	btfsc	status,0,c
  1180  001266  D004               	goto	l2073
  1181  001268  0E00               	movlw	0
  1182  00126A  6E4F               	movwf	sort@lightSensor+1,c
  1183  00126C  0E01               	movlw	1
  1184  00126E  D003               	goto	L3
  1185  001270                     l2073:
  1186                           
  1187                           ;start.c: 162: else lightSensor = 0;
  1188  001270  0E00               	movlw	0
  1189  001272  6E4F               	movwf	sort@lightSensor+1,c
  1190  001274  0E00               	movlw	0
  1191  001276                     L3:
  1192  001276  6E4E               	movwf	sort@lightSensor,c
  1193                           
  1194                           ;start.c: 165: LATCbits.LATC0 = 0;
  1195  001278  908B               	bcf	3979,0,c	;volatile
  1196                           
  1197                           ;start.c: 166: LATCbits.LATC2 = 0;
  1198  00127A  948B               	bcf	3979,2,c	;volatile
  1199                           
  1200                           ;start.c: 167: LATCbits.LATC5 = 0;
  1201  00127C  9A8B               	bcf	3979,5,c	;volatile
  1202                           
  1203                           ;start.c: 170: if (lightSensor){
  1204  00127E  504E               	movf	sort@lightSensor,w,c
  1205  001280  104F               	iorwf	sort@lightSensor+1,w,c
  1206  001282  B4D8               	btfsc	status,2,c
  1207  001284  D01E               	goto	l2093
  1208                           
  1209                           ;start.c: 171: if (proxSensor & microswitch){
  1210  001286  5050               	movf	sort@microswitch,w,c
  1211  001288  1452               	andwf	sort@proxSensor,w,c
  1212  00128A  6E42               	movwf	??_sort& (0+255),c
  1213  00128C  5051               	movf	sort@microswitch+1,w,c
  1214  00128E  1453               	andwf	sort@proxSensor+1,w,c
  1215  001290  6E43               	movwf	(??_sort+1)& (0+255),c
  1216  001292  5042               	movf	??_sort,w,c
  1217  001294  1043               	iorwf	??_sort+1,w,c
  1218  001296  B4D8               	btfsc	status,2,c
  1219  001298  D00A               	goto	l2089
  1220                           
  1221                           ;start.c: 172: eskaCap = eskaCap + 1;
  1222  00129A  0E01               	movlw	1
  1223  00129C  245F               	addwf	_eskaCap,w,c
  1224  00129E  6E5F               	movwf	_eskaCap,c
  1225  0012A0  0E00               	movlw	0
  1226  0012A2  2060               	addwfc	_eskaCap+1,w,c
  1227  0012A4  6E60               	movwf	_eskaCap+1,c
  1228                           
  1229                           ;start.c: 173: bottle = 0;
  1230  0012A6  0E00               	movlw	0
  1231  0012A8  6E5B               	movwf	sort@bottle+1,c
  1232  0012AA  0E00               	movlw	0
  1233  0012AC  D027               	goto	L6
  1234  0012AE                     l2089:
  1235                           
  1236                           ;start.c: 175: else{
  1237                           ;start.c: 176: eskaNoCap = eskaNoCap + 1;
  1238  0012AE  0E01               	movlw	1
  1239  0012B0  2461               	addwf	_eskaNoCap,w,c
  1240  0012B2  6E61               	movwf	_eskaNoCap,c
  1241  0012B4  0E00               	movlw	0
  1242  0012B6  2062               	addwfc	_eskaNoCap+1,w,c
  1243  0012B8  6E62               	movwf	_eskaNoCap+1,c
  1244                           
  1245                           ;start.c: 177: bottle = 1;
  1246  0012BA  0E00               	movlw	0
  1247  0012BC  6E5B               	movwf	sort@bottle+1,c
  1248  0012BE  0E01               	movlw	1
  1249  0012C0  D01D               	goto	L6
  1250  0012C2                     l2093:
  1251                           
  1252                           ;start.c: 180: else{
  1253                           ;start.c: 181: if (proxSensor & microswitch){
  1254  0012C2  5050               	movf	sort@microswitch,w,c
  1255  0012C4  1452               	andwf	sort@proxSensor,w,c
  1256  0012C6  6E42               	movwf	??_sort& (0+255),c
  1257  0012C8  5051               	movf	sort@microswitch+1,w,c
  1258  0012CA  1453               	andwf	sort@proxSensor+1,w,c
  1259  0012CC  6E43               	movwf	(??_sort+1)& (0+255),c
  1260  0012CE  5042               	movf	??_sort,w,c
  1261  0012D0  1043               	iorwf	??_sort+1,w,c
  1262  0012D2  B4D8               	btfsc	status,2,c
  1263  0012D4  D00A               	goto	l2099
  1264                           
  1265                           ;start.c: 182: yopCap = yopCap + 1;
  1266  0012D6  0E01               	movlw	1
  1267  0012D8  2465               	addwf	_yopCap,w,c
  1268  0012DA  6E65               	movwf	_yopCap,c
  1269  0012DC  0E00               	movlw	0
  1270  0012DE  2066               	addwfc	_yopCap+1,w,c
  1271  0012E0  6E66               	movwf	_yopCap+1,c
  1272                           
  1273                           ;start.c: 183: bottle = 2;
  1274  0012E2  0E00               	movlw	0
  1275  0012E4  6E5B               	movwf	sort@bottle+1,c
  1276  0012E6  0E02               	movlw	2
  1277  0012E8  D009               	goto	L6
  1278  0012EA                     l2099:
  1279                           
  1280                           ;start.c: 185: else{
  1281                           ;start.c: 186: yopNoCap = yopNoCap + 1;
  1282  0012EA  0E01               	movlw	1
  1283  0012EC  2467               	addwf	_yopNoCap,w,c
  1284  0012EE  6E67               	movwf	_yopNoCap,c
  1285  0012F0  0E00               	movlw	0
  1286  0012F2  2068               	addwfc	_yopNoCap+1,w,c
  1287  0012F4  6E68               	movwf	_yopNoCap+1,c
  1288                           
  1289                           ;start.c: 187: bottle = 3;
  1290  0012F6  0E00               	movlw	0
  1291  0012F8  6E5B               	movwf	sort@bottle+1,c
  1292  0012FA  0E03               	movlw	3
  1293  0012FC                     L6:
  1294  0012FC  6E5A               	movwf	sort@bottle,c
  1295                           
  1296                           ;start.c: 188: }
  1297                           ;start.c: 189: }
  1298                           ;start.c: 192: rotate (bottle);
  1299  0012FE  C05A  F010         	movff	sort@bottle,rotate@degree
  1300  001302  C05B  F011         	movff	sort@bottle+1,rotate@degree+1
  1301  001306  EC47  F00E         	call	_rotate	;wreg free
  1302                           
  1303                           ;start.c: 193: currentContainer = bottle;
  1304  00130A  C05A  F046         	movff	sort@bottle,sort@currentContainer
  1305  00130E  C05B  F047         	movff	sort@bottle+1,sort@currentContainer+1
  1306                           
  1307                           ;start.c: 196: unsigned int i;
  1308                           ;start.c: 197: for (i = 0; i < 50; i++) {
  1309  001312  0E00               	movlw	0
  1310  001314  6E5D               	movwf	sort@i_639+1,c
  1311  001316  0E00               	movlw	0
  1312  001318  6E5C               	movwf	sort@i_639,c
  1313  00131A                     l2109:
  1314  00131A  505D               	movf	sort@i_639+1,w,c
  1315  00131C  E117               	bnz	l2119
  1316  00131E  0E32               	movlw	50
  1317  001320  5C5C               	subwf	sort@i_639,w,c
  1318  001322  B0D8               	btfsc	status,0,c
  1319  001324  D013               	goto	l2119
  1320                           
  1321                           ;start.c: 198: LATDbits.LATD1 = 1;
  1322  001326  828C               	bsf	3980,1,c	;volatile
  1323                           
  1324                           ;start.c: 199: _delay((unsigned long)((1000)*(8000000/4000000.0)));
  1325  001328  0E03               	movlw	3
  1326  00132A  6E42               	movwf	??_sort& (0+255),c
  1327  00132C  0E98               	movlw	152
  1328  00132E                     u2017:
  1329  00132E  2EE8               	decfsz	wreg,f,c
  1330  001330  D7FE               	bra	u2017
  1331  001332  2E42               	decfsz	??_sort& (0+255),f,c
  1332  001334  D7FC               	bra	u2017
  1333                           
  1334                           ;start.c: 200: LATDbits.LATD1 = 0;
  1335  001336  928C               	bcf	3980,1,c	;volatile
  1336                           
  1337                           ;start.c: 201: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  1338  001338  0E31               	movlw	49
  1339  00133A  6E42               	movwf	??_sort& (0+255),c
  1340  00133C  0E0C               	movlw	12
  1341  00133E                     u2027:
  1342  00133E  2EE8               	decfsz	wreg,f,c
  1343  001340  D7FE               	bra	u2027
  1344  001342  2E42               	decfsz	??_sort& (0+255),f,c
  1345  001344  D7FC               	bra	u2027
  1346  001346  4A5C               	infsnz	sort@i_639,f,c
  1347  001348  2A5D               	incf	sort@i_639+1,f,c
  1348  00134A  D7E7               	goto	l2109
  1349  00134C                     l2119:
  1350                           
  1351                           ;start.c: 202: }
  1352                           ;start.c: 205: for (i = 0; i < 50; i++) {
  1353  00134C  0E00               	movlw	0
  1354  00134E  6E5D               	movwf	sort@i_639+1,c
  1355  001350  0E00               	movlw	0
  1356  001352  6E5C               	movwf	sort@i_639,c
  1357  001354  505D               	movf	sort@i_639+1,w,c
  1358  001356  E105               	bnz	u1740
  1359  001358  0E32               	movlw	50
  1360  00135A  5C5C               	subwf	sort@i_639,w,c
  1361  00135C  B0D8               	btfsc	status,0,c
  1362  00135E  D695               	goto	l1999
  1363  001360  D001               	goto	l199
  1364  001362                     u1740:
  1365  001362  D693               	goto	l1999
  1366  001364                     l199:
  1367                           
  1368                           ;start.c: 206: LATDbits.LATD1 = 1;
  1369  001364  828C               	bsf	3980,1,c	;volatile
  1370                           
  1371                           ;start.c: 207: _delay((unsigned long)((1500)*(8000000/4000000.0)));
  1372  001366  0E04               	movlw	4
  1373  001368  6E42               	movwf	??_sort& (0+255),c
  1374  00136A  0EE4               	movlw	228
  1375  00136C                     u2037:
  1376  00136C  2EE8               	decfsz	wreg,f,c
  1377  00136E  D7FE               	bra	u2037
  1378  001370  2E42               	decfsz	??_sort& (0+255),f,c
  1379  001372  D7FC               	bra	u2037
  1380  001374  D000               	nop2	
  1381                           
  1382                           ;start.c: 208: LATDbits.LATD1 = 0;
  1383  001376  928C               	bcf	3980,1,c	;volatile
  1384                           
  1385                           ;start.c: 209: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  1386  001378  0E31               	movlw	49
  1387  00137A  6E42               	movwf	??_sort& (0+255),c
  1388  00137C  0E0C               	movlw	12
  1389  00137E                     u2047:
  1390  00137E  2EE8               	decfsz	wreg,f,c
  1391  001380  D7FE               	bra	u2047
  1392  001382  2E42               	decfsz	??_sort& (0+255),f,c
  1393  001384  D7FC               	bra	u2047
  1394  001386  4A5C               	infsnz	sort@i_639,f,c
  1395  001388  2A5D               	incf	sort@i_639+1,f,c
  1396  00138A  505D               	movf	sort@i_639+1,w,c
  1397  00138C  E101               	bnz	u1750
  1398  00138E  D7E4               	goto	L7
  1399  001390                     u1750:
  1400  001390  D67C               	goto	l1999
  1401  001392                     l2137:
  1402  001392  0E63               	movlw	99
  1403  001394  6458               	cpfsgt	sort@i_640,c
  1404  001396  D001               	goto	l2141
  1405  001398  D00A               	goto	l2145
  1406  00139A                     l2141:
  1407  00139A  0E1A               	movlw	26
  1408  00139C  6E42               	movwf	??_sort& (0+255),c
  1409  00139E  0EF8               	movlw	248
  1410  0013A0                     u2057:
  1411  0013A0  2EE8               	decfsz	wreg,f,c
  1412  0013A2  D7FE               	bra	u2057
  1413  0013A4  2E42               	decfsz	??_sort& (0+255),f,c
  1414  0013A6  D7FC               	bra	u2057
  1415  0013A8  D000               	nop2	
  1416  0013AA  2A58               	incf	sort@i_640,f,c
  1417  0013AC  D7F2               	goto	l2137
  1418  0013AE                     l2145:
  1419                           
  1420                           ;start.c: 220: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
  1421  0013AE  0E00               	movlw	0
  1422  0013B0  6E59               	movwf	sort@i_641,c
  1423  0013B2                     l2147:
  1424  0013B2  0E63               	movlw	99
  1425  0013B4  6459               	cpfsgt	sort@i_641,c
  1426  0013B6  D001               	goto	l2151
  1427  0013B8  D00A               	goto	l206
  1428  0013BA                     l2151:
  1429  0013BA  0E1A               	movlw	26
  1430  0013BC  6E42               	movwf	??_sort& (0+255),c
  1431  0013BE  0EF8               	movlw	248
  1432  0013C0                     u2067:
  1433  0013C0  2EE8               	decfsz	wreg,f,c
  1434  0013C2  D7FE               	bra	u2067
  1435  0013C4  2E42               	decfsz	??_sort& (0+255),f,c
  1436  0013C6  D7FC               	bra	u2067
  1437  0013C8  D000               	nop2	
  1438  0013CA  2A59               	incf	sort@i_641,f,c
  1439  0013CC  D7F2               	goto	l2147
  1440  0013CE                     l206:
  1441                           
  1442                           ;start.c: 222: __nop();
  1443  0013CE  F000               	nop	
  1444  0013D0  0012               	return		;funcret
  1445  0013D2                     __end_of_sort:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           prodh	equ	0xFF4
  1452                           prodl	equ	0xFF3
  1453                           intcon	equ	0xFF2
  1454                           intcon3	equ	0xFF0
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           status	equ	0xFD8
  1458                           
  1459 ;; *************** function _ultrasonicFindBottle *****************
  1460 ;; Defined at:
  1461 ;;		line 28 in file "start.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;		None
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  a               2   63[COMRAM] int 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  2   57[COMRAM] int 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1477 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1478 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1479 ;;Total ram usage:        8 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    3
  1482 ;; This function calls:
  1483 ;;		___awtoft
  1484 ;;		___ftdiv
  1485 ;;		___fttol
  1486 ;; This function is called by:
  1487 ;;		_sort
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text2
  1492  00183E                     __ptext2:
  1493                           	opt stack 0
  1494  00183E                     _ultrasonicFindBottle:
  1495                           	opt stack 26
  1496                           
  1497                           ;start.c: 30: int a;
  1498                           ;start.c: 31: LATAbits.LATA0 = 1;
  1499                           
  1500                           ;incstack = 0
  1501  00183E  8089               	bsf	3977,0,c	;volatile
  1502                           
  1503                           ;start.c: 32: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1504  001840  0E06               	movlw	6
  1505  001842                     u2077:
  1506  001842  2EE8               	decfsz	wreg,f,c
  1507  001844  D7FE               	bra	u2077
  1508  001846  D000               	nop2	
  1509                           
  1510                           ;start.c: 33: LATAbits.LATA0 = 0;
  1511  001848  9089               	bcf	3977,0,c	;volatile
  1512                           
  1513                           ;start.c: 35: TMR1H = 0;
  1514  00184A  0E00               	movlw	0
  1515  00184C  6ECF               	movwf	4047,c	;volatile
  1516                           
  1517                           ;start.c: 36: TMR1L = 0;
  1518  00184E  0E00               	movlw	0
  1519  001850  6ECE               	movwf	4046,c	;volatile
  1520                           
  1521                           ;start.c: 38: TMR1ON = 1;
  1522  001852  80CD               	bsf	4045,0,c	;volatile
  1523                           
  1524                           ;start.c: 39: while(!PORTBbits.RB0)
  1525  001854  D019               	goto	l146
  1526  001856                     l1851:
  1527                           
  1528                           ;start.c: 40: {
  1529                           ;start.c: 41: a = (TMR1L | (TMR1H<<8));
  1530  001856  50CF               	movf	4047,w,c	;volatile
  1531  001858  6E3D               	movwf	(??_ultrasonicFindBottle+1)& (0+255),c
  1532  00185A  6A3C               	clrf	??_ultrasonicFindBottle& (0+255),c
  1533  00185C  50CE               	movf	4046,w,c	;volatile
  1534  00185E  6E3E               	movwf	(??_ultrasonicFindBottle+2)& (0+255),c
  1535  001860  6A3F               	clrf	(??_ultrasonicFindBottle+3)& (0+255),c
  1536  001862  503C               	movf	??_ultrasonicFindBottle,w,c
  1537  001864  103E               	iorwf	??_ultrasonicFindBottle+2,w,c
  1538  001866  6E40               	movwf	ultrasonicFindBottle@a,c
  1539  001868  503D               	movf	??_ultrasonicFindBottle+1,w,c
  1540  00186A  103F               	iorwf	??_ultrasonicFindBottle+3,w,c
  1541  00186C  6E41               	movwf	ultrasonicFindBottle@a+1,c
  1542                           
  1543                           ;start.c: 42: if (a > 100) return 0;
  1544  00186E  BE41               	btfsc	ultrasonicFindBottle@a+1,7,c
  1545  001870  D00B               	goto	l146
  1546  001872  5041               	movf	ultrasonicFindBottle@a+1,w,c
  1547  001874  E104               	bnz	u1360
  1548  001876  0E65               	movlw	101
  1549  001878  5C40               	subwf	ultrasonicFindBottle@a,w,c
  1550  00187A  A0D8               	btfss	status,0,c
  1551  00187C  D005               	goto	l146
  1552  00187E                     u1360:
  1553  00187E  0E00               	movlw	0
  1554  001880  6E3B               	movwf	?_ultrasonicFindBottle+1,c
  1555  001882  0E00               	movlw	0
  1556  001884  6E3A               	movwf	?_ultrasonicFindBottle,c
  1557  001886  0012               	return	
  1558  001888                     l146:
  1559  001888  A081               	btfss	3969,0,c	;volatile
  1560  00188A  D7E5               	goto	l1851
  1561                           
  1562                           ;start.c: 43: }
  1563                           ;start.c: 44: TMR1ON = 0;
  1564  00188C  90CD               	bcf	4045,0,c	;volatile
  1565                           
  1566                           ;start.c: 46: TMR1H = 0;
  1567  00188E  0E00               	movlw	0
  1568  001890  6ECF               	movwf	4047,c	;volatile
  1569                           
  1570                           ;start.c: 47: TMR1L = 0;
  1571  001892  0E00               	movlw	0
  1572  001894  6ECE               	movwf	4046,c	;volatile
  1573                           
  1574                           ;start.c: 49: TMR1ON = 1;
  1575  001896  80CD               	bsf	4045,0,c	;volatile
  1576  001898                     l151:
  1577  001898  B081               	btfsc	3969,0,c	;volatile
  1578  00189A  D7FE               	goto	l151
  1579                           
  1580                           ;start.c: 51: TMR1ON = 0;
  1581  00189C  90CD               	bcf	4045,0,c	;volatile
  1582                           
  1583                           ;start.c: 53: a = (TMR1L | (TMR1H<<8));
  1584  00189E  50CF               	movf	4047,w,c	;volatile
  1585  0018A0  6E3D               	movwf	(??_ultrasonicFindBottle+1)& (0+255),c
  1586  0018A2  6A3C               	clrf	??_ultrasonicFindBottle& (0+255),c
  1587  0018A4  50CE               	movf	4046,w,c	;volatile
  1588  0018A6  6E3E               	movwf	(??_ultrasonicFindBottle+2)& (0+255),c
  1589  0018A8  6A3F               	clrf	(??_ultrasonicFindBottle+3)& (0+255),c
  1590  0018AA  503C               	movf	??_ultrasonicFindBottle,w,c
  1591  0018AC  103E               	iorwf	??_ultrasonicFindBottle+2,w,c
  1592  0018AE  6E40               	movwf	ultrasonicFindBottle@a,c
  1593  0018B0  503D               	movf	??_ultrasonicFindBottle+1,w,c
  1594  0018B2  103F               	iorwf	??_ultrasonicFindBottle+3,w,c
  1595  0018B4  6E41               	movwf	ultrasonicFindBottle@a+1,c
  1596                           
  1597                           ;start.c: 54: a = a/58.82;
  1598  0018B6  0E48               	movlw	72
  1599  0018B8  6E1F               	movwf	___ftdiv@f2,c
  1600  0018BA  0E6B               	movlw	107
  1601  0018BC  6E20               	movwf	___ftdiv@f2+1,c
  1602  0018BE  0E42               	movlw	66
  1603  0018C0  6E21               	movwf	___ftdiv@f2+2,c
  1604  0018C2  C040  F018         	movff	ultrasonicFindBottle@a,___awtoft@c
  1605  0018C6  C041  F019         	movff	ultrasonicFindBottle@a+1,___awtoft@c+1
  1606  0018CA  EC5A  F00F         	call	___awtoft	;wreg free
  1607  0018CE  C018  F01C         	movff	?___awtoft,___ftdiv@f1
  1608  0018D2  C019  F01D         	movff	?___awtoft+1,___ftdiv@f1+1
  1609  0018D6  C01A  F01E         	movff	?___awtoft+2,___ftdiv@f1+2
  1610  0018DA  EC96  F00C         	call	___ftdiv	;wreg free
  1611  0018DE  C01C  F02B         	movff	?___ftdiv,___fttol@f1
  1612  0018E2  C01D  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  1613  0018E6  C01E  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  1614  0018EA  EC2B  F00B         	call	___fttol	;wreg free
  1615  0018EE  C02B  F040         	movff	?___fttol,ultrasonicFindBottle@a
  1616  0018F2  C02C  F041         	movff	?___fttol+1,ultrasonicFindBottle@a+1
  1617                           
  1618                           ;start.c: 55: a = a + 1;
  1619  0018F6  0E01               	movlw	1
  1620  0018F8  2440               	addwf	ultrasonicFindBottle@a,w,c
  1621  0018FA  6E40               	movwf	ultrasonicFindBottle@a,c
  1622  0018FC  0E00               	movlw	0
  1623  0018FE  2041               	addwfc	ultrasonicFindBottle@a+1,w,c
  1624  001900  6E41               	movwf	ultrasonicFindBottle@a+1,c
  1625                           
  1626                           ;start.c: 57: if (a >= 1 && a <=10) return 1;
  1627  001902  BE41               	btfsc	ultrasonicFindBottle@a+1,7,c
  1628  001904  0012               	return	
  1629  001906  5041               	movf	ultrasonicFindBottle@a+1,w,c
  1630  001908  E103               	bnz	u1390
  1631  00190A  0440               	decf	ultrasonicFindBottle@a,w,c
  1632  00190C  A0D8               	btfss	status,0,c
  1633  00190E  0012               	return	
  1634  001910                     u1390:
  1635  001910  BE41               	btfsc	ultrasonicFindBottle@a+1,7,c
  1636  001912  D006               	goto	l1871
  1637  001914  5041               	movf	ultrasonicFindBottle@a+1,w,c
  1638  001916  E109               	bnz	l149
  1639  001918  0E0B               	movlw	11
  1640  00191A  5C40               	subwf	ultrasonicFindBottle@a,w,c
  1641  00191C  B0D8               	btfsc	status,0,c
  1642  00191E  0012               	return	
  1643  001920                     l1871:
  1644  001920  0E00               	movlw	0
  1645  001922  6E3B               	movwf	?_ultrasonicFindBottle+1,c
  1646  001924  0E01               	movlw	1
  1647  001926  6E3A               	movwf	?_ultrasonicFindBottle,c
  1648  001928  0012               	return	
  1649  00192A                     l149:
  1650  00192A  0012               	return		;funcret
  1651  00192C                     __end_of_ultrasonicFindBottle:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           prodh	equ	0xFF4
  1658                           prodl	equ	0xFF3
  1659                           intcon	equ	0xFF2
  1660                           intcon3	equ	0xFF0
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function ___fttol *****************
  1666 ;; Defined at:
  1667 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  f1              3   42[COMRAM] float 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  lval            4   52[COMRAM] unsigned long 
  1672 ;;  exp1            1   56[COMRAM] unsigned char 
  1673 ;;  sign1           1   51[COMRAM] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  4   42[COMRAM] long 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1683 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;Total ram usage:       15 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    1
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_ultrasonicFindBottle
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text3
  1698  001656                     __ptext3:
  1699                           	opt stack 0
  1700  001656                     ___fttol:
  1701                           	opt stack 27
  1702                           
  1703                           ;incstack = 0
  1704  001656  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  1705  00165A  6A30               	clrf	(??___fttol+1)& (0+255),c
  1706  00165C  6A31               	clrf	(??___fttol+2)& (0+255),c
  1707  00165E  342C               	rlcf	___fttol@f1+1,w,c
  1708  001660  362F               	rlcf	??___fttol& (0+255),f,c
  1709  001662  E301               	bnc	u1281
  1710  001664  8030               	bsf	(??___fttol+1)& (0+255),0,c
  1711  001666                     u1281:
  1712  001666  502F               	movf	??___fttol,w,c
  1713  001668  6E39               	movwf	___fttol@exp1,c
  1714  00166A  5039               	movf	___fttol@exp1,w,c
  1715  00166C  A4D8               	btfss	status,2,c
  1716  00166E  D009               	goto	l1799
  1717  001670  0E00               	movlw	0
  1718  001672  6E2B               	movwf	?___fttol,c
  1719  001674  0E00               	movlw	0
  1720  001676  6E2C               	movwf	?___fttol+1,c
  1721  001678  0E00               	movlw	0
  1722  00167A  6E2D               	movwf	?___fttol+2,c
  1723  00167C  0E00               	movlw	0
  1724  00167E  6E2E               	movwf	?___fttol+3,c
  1725  001680  0012               	return	
  1726  001682                     l1799:
  1727  001682  0E17               	movlw	23
  1728  001684  6E2F               	movwf	??___fttol& (0+255),c
  1729  001686  C02B  F030         	movff	___fttol@f1,??___fttol+1
  1730  00168A  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  1731  00168E  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  1732  001692  282F               	incf	??___fttol,w,c
  1733  001694  6E33               	movwf	(??___fttol+4)& (0+255),c
  1734  001696  D004               	goto	u1300
  1735  001698                     u1305:
  1736  001698  90D8               	bcf	status,0,c
  1737  00169A  3232               	rrcf	??___fttol+3,f,c
  1738  00169C  3231               	rrcf	??___fttol+2,f,c
  1739  00169E  3230               	rrcf	??___fttol+1,f,c
  1740  0016A0                     u1300:
  1741  0016A0  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  1742  0016A2  D7FA               	goto	u1305
  1743  0016A4  5030               	movf	??___fttol+1,w,c
  1744  0016A6  6E34               	movwf	___fttol@sign1,c
  1745  0016A8  8E2C               	bsf	___fttol@f1+1,7,c
  1746  0016AA  0EFF               	movlw	255
  1747  0016AC  162B               	andwf	___fttol@f1,f,c
  1748  0016AE  0EFF               	movlw	255
  1749  0016B0  162C               	andwf	___fttol@f1+1,f,c
  1750  0016B2  0E00               	movlw	0
  1751  0016B4  162D               	andwf	___fttol@f1+2,f,c
  1752  0016B6  502B               	movf	___fttol@f1,w,c
  1753  0016B8  6E35               	movwf	___fttol@lval,c
  1754  0016BA  502C               	movf	___fttol@f1+1,w,c
  1755  0016BC  6E36               	movwf	___fttol@lval+1,c
  1756  0016BE  502D               	movf	___fttol@f1+2,w,c
  1757  0016C0  6E37               	movwf	___fttol@lval+2,c
  1758  0016C2  6A38               	clrf	___fttol@lval+3,c
  1759  0016C4  0E8E               	movlw	142
  1760  0016C6  5E39               	subwf	___fttol@exp1,f,c
  1761  0016C8  AE39               	btfss	___fttol@exp1,7,c
  1762  0016CA  D016               	goto	l1821
  1763  0016CC  5039               	movf	___fttol@exp1,w,c
  1764  0016CE  0A80               	xorlw	128
  1765  0016D0  0F8F               	addlw	143
  1766  0016D2  B0D8               	btfsc	status,0,c
  1767  0016D4  D009               	goto	l1817
  1768  0016D6  0E00               	movlw	0
  1769  0016D8  6E2B               	movwf	?___fttol,c
  1770  0016DA  0E00               	movlw	0
  1771  0016DC  6E2C               	movwf	?___fttol+1,c
  1772  0016DE  0E00               	movlw	0
  1773  0016E0  6E2D               	movwf	?___fttol+2,c
  1774  0016E2  0E00               	movlw	0
  1775  0016E4  6E2E               	movwf	?___fttol+3,c
  1776  0016E6  0012               	return	
  1777  0016E8                     l1817:
  1778  0016E8  90D8               	bcf	status,0,c
  1779  0016EA  3238               	rrcf	___fttol@lval+3,f,c
  1780  0016EC  3237               	rrcf	___fttol@lval+2,f,c
  1781  0016EE  3236               	rrcf	___fttol@lval+1,f,c
  1782  0016F0  3235               	rrcf	___fttol@lval,f,c
  1783  0016F2  3E39               	incfsz	___fttol@exp1,f,c
  1784  0016F4  D7F9               	goto	l1817
  1785  0016F6  D015               	goto	l1831
  1786  0016F8                     l1821:
  1787  0016F8  0E17               	movlw	23
  1788  0016FA  6439               	cpfsgt	___fttol@exp1,c
  1789  0016FC  D00F               	goto	l1829
  1790  0016FE  0E00               	movlw	0
  1791  001700  6E2B               	movwf	?___fttol,c
  1792  001702  0E00               	movlw	0
  1793  001704  6E2C               	movwf	?___fttol+1,c
  1794  001706  0E00               	movlw	0
  1795  001708  6E2D               	movwf	?___fttol+2,c
  1796  00170A  0E00               	movlw	0
  1797  00170C  6E2E               	movwf	?___fttol+3,c
  1798  00170E  0012               	return	
  1799  001710                     l1827:
  1800  001710  90D8               	bcf	status,0,c
  1801  001712  3635               	rlcf	___fttol@lval,f,c
  1802  001714  3636               	rlcf	___fttol@lval+1,f,c
  1803  001716  3637               	rlcf	___fttol@lval+2,f,c
  1804  001718  3638               	rlcf	___fttol@lval+3,f,c
  1805  00171A  0639               	decf	___fttol@exp1,f,c
  1806  00171C                     l1829:
  1807  00171C  5039               	movf	___fttol@exp1,w,c
  1808  00171E  A4D8               	btfss	status,2,c
  1809  001720  D7F7               	goto	l1827
  1810  001722                     l1831:
  1811  001722  5034               	movf	___fttol@sign1,w,c
  1812  001724  B4D8               	btfsc	status,2,c
  1813  001726  D008               	goto	l1835
  1814  001728  1E38               	comf	___fttol@lval+3,f,c
  1815  00172A  1E37               	comf	___fttol@lval+2,f,c
  1816  00172C  1E36               	comf	___fttol@lval+1,f,c
  1817  00172E  6C35               	negf	___fttol@lval,c
  1818  001730  0E00               	movlw	0
  1819  001732  2236               	addwfc	___fttol@lval+1,f,c
  1820  001734  2237               	addwfc	___fttol@lval+2,f,c
  1821  001736  2238               	addwfc	___fttol@lval+3,f,c
  1822  001738                     l1835:
  1823  001738  C035  F02B         	movff	___fttol@lval,?___fttol
  1824  00173C  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  1825  001740  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  1826  001744  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  1827  001748  0012               	return	
  1828  00174A                     __end_of___fttol:
  1829                           	opt stack 0
  1830                           tblptru	equ	0xFF8
  1831                           tblptrh	equ	0xFF7
  1832                           tblptrl	equ	0xFF6
  1833                           tablat	equ	0xFF5
  1834                           prodh	equ	0xFF4
  1835                           prodl	equ	0xFF3
  1836                           intcon	equ	0xFF2
  1837                           intcon3	equ	0xFF0
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           status	equ	0xFD8
  1841                           
  1842 ;; *************** function ___ftdiv *****************
  1843 ;; Defined at:
  1844 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;  f1              3   27[COMRAM] float 
  1847 ;;  f2              3   30[COMRAM] float 
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;  f3              3   37[COMRAM] float 
  1850 ;;  sign            1   41[COMRAM] unsigned char 
  1851 ;;  exp             1   40[COMRAM] unsigned char 
  1852 ;;  cntr            1   36[COMRAM] unsigned char 
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  3   27[COMRAM] float 
  1855 ;; Registers used:
  1856 ;;		wreg, status,2, status,0, cstack
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1862 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;Total ram usage:       15 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; Hardware stack levels required when called:    2
  1869 ;; This function calls:
  1870 ;;		___ftpack
  1871 ;; This function is called by:
  1872 ;;		_ultrasonicFindBottle
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text4
  1877  00192C                     __ptext4:
  1878                           	opt stack 0
  1879  00192C                     ___ftdiv:
  1880                           	opt stack 26
  1881                           
  1882                           ;incstack = 0
  1883  00192C  C01E  F022         	movff	___ftdiv@f1+2,??___ftdiv
  1884  001930  6A23               	clrf	(??___ftdiv+1)& (0+255),c
  1885  001932  6A24               	clrf	(??___ftdiv+2)& (0+255),c
  1886  001934  341D               	rlcf	___ftdiv@f1+1,w,c
  1887  001936  3622               	rlcf	??___ftdiv& (0+255),f,c
  1888  001938  E301               	bnc	u1221
  1889  00193A  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
  1890  00193C                     u1221:
  1891  00193C  5022               	movf	??___ftdiv,w,c
  1892  00193E  6E29               	movwf	___ftdiv@exp,c
  1893  001940  5029               	movf	___ftdiv@exp,w,c
  1894  001942  A4D8               	btfss	status,2,c
  1895  001944  D007               	goto	l1741
  1896  001946  0E00               	movlw	0
  1897  001948  6E1C               	movwf	?___ftdiv,c
  1898  00194A  0E00               	movlw	0
  1899  00194C  6E1D               	movwf	?___ftdiv+1,c
  1900  00194E  0E00               	movlw	0
  1901  001950  6E1E               	movwf	?___ftdiv+2,c
  1902  001952  0012               	return	
  1903  001954                     l1741:
  1904  001954  C021  F022         	movff	___ftdiv@f2+2,??___ftdiv
  1905  001958  6A23               	clrf	(??___ftdiv+1)& (0+255),c
  1906  00195A  6A24               	clrf	(??___ftdiv+2)& (0+255),c
  1907  00195C  3420               	rlcf	___ftdiv@f2+1,w,c
  1908  00195E  3622               	rlcf	??___ftdiv& (0+255),f,c
  1909  001960  E301               	bnc	u1241
  1910  001962  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
  1911  001964                     u1241:
  1912  001964  5022               	movf	??___ftdiv,w,c
  1913  001966  6E2A               	movwf	___ftdiv@sign,c
  1914  001968  502A               	movf	___ftdiv@sign,w,c
  1915  00196A  A4D8               	btfss	status,2,c
  1916  00196C  D007               	goto	l1747
  1917  00196E  0E00               	movlw	0
  1918  001970  6E1C               	movwf	?___ftdiv,c
  1919  001972  0E00               	movlw	0
  1920  001974  6E1D               	movwf	?___ftdiv+1,c
  1921  001976  0E00               	movlw	0
  1922  001978  6E1E               	movwf	?___ftdiv+2,c
  1923  00197A  0012               	return	
  1924  00197C                     l1747:
  1925  00197C  0E00               	movlw	0
  1926  00197E  6E26               	movwf	___ftdiv@f3,c
  1927  001980  0E00               	movlw	0
  1928  001982  6E27               	movwf	___ftdiv@f3+1,c
  1929  001984  0E00               	movlw	0
  1930  001986  6E28               	movwf	___ftdiv@f3+2,c
  1931  001988  502A               	movf	___ftdiv@sign,w,c
  1932  00198A  0F89               	addlw	137
  1933  00198C  5E29               	subwf	___ftdiv@exp,f,c
  1934  00198E  C01E  F02A         	movff	___ftdiv@f1+2,___ftdiv@sign
  1935  001992  5021               	movf	___ftdiv@f2+2,w,c
  1936  001994  1A2A               	xorwf	___ftdiv@sign,f,c
  1937  001996  0E80               	movlw	128
  1938  001998  162A               	andwf	___ftdiv@sign,f,c
  1939  00199A  8E1D               	bsf	___ftdiv@f1+1,7,c
  1940  00199C  0EFF               	movlw	255
  1941  00199E  161C               	andwf	___ftdiv@f1,f,c
  1942  0019A0  0EFF               	movlw	255
  1943  0019A2  161D               	andwf	___ftdiv@f1+1,f,c
  1944  0019A4  0E00               	movlw	0
  1945  0019A6  161E               	andwf	___ftdiv@f1+2,f,c
  1946  0019A8  8E20               	bsf	___ftdiv@f2+1,7,c
  1947  0019AA  0EFF               	movlw	255
  1948  0019AC  161F               	andwf	___ftdiv@f2,f,c
  1949  0019AE  0EFF               	movlw	255
  1950  0019B0  1620               	andwf	___ftdiv@f2+1,f,c
  1951  0019B2  0E00               	movlw	0
  1952  0019B4  1621               	andwf	___ftdiv@f2+2,f,c
  1953  0019B6  0E18               	movlw	24
  1954  0019B8  6E25               	movwf	___ftdiv@cntr,c
  1955  0019BA                     l1767:
  1956  0019BA  90D8               	bcf	status,0,c
  1957  0019BC  3626               	rlcf	___ftdiv@f3,f,c
  1958  0019BE  3627               	rlcf	___ftdiv@f3+1,f,c
  1959  0019C0  3628               	rlcf	___ftdiv@f3+2,f,c
  1960  0019C2  501F               	movf	___ftdiv@f2,w,c
  1961  0019C4  5C1C               	subwf	___ftdiv@f1,w,c
  1962  0019C6  5020               	movf	___ftdiv@f2+1,w,c
  1963  0019C8  581D               	subwfb	___ftdiv@f1+1,w,c
  1964  0019CA  5021               	movf	___ftdiv@f2+2,w,c
  1965  0019CC  581E               	subwfb	___ftdiv@f1+2,w,c
  1966  0019CE  A0D8               	btfss	status,0,c
  1967  0019D0  D007               	goto	l570
  1968  0019D2  501F               	movf	___ftdiv@f2,w,c
  1969  0019D4  5E1C               	subwf	___ftdiv@f1,f,c
  1970  0019D6  5020               	movf	___ftdiv@f2+1,w,c
  1971  0019D8  5A1D               	subwfb	___ftdiv@f1+1,f,c
  1972  0019DA  5021               	movf	___ftdiv@f2+2,w,c
  1973  0019DC  5A1E               	subwfb	___ftdiv@f1+2,f,c
  1974  0019DE  8026               	bsf	___ftdiv@f3,0,c
  1975  0019E0                     l570:
  1976  0019E0  90D8               	bcf	status,0,c
  1977  0019E2  361C               	rlcf	___ftdiv@f1,f,c
  1978  0019E4  361D               	rlcf	___ftdiv@f1+1,f,c
  1979  0019E6  361E               	rlcf	___ftdiv@f1+2,f,c
  1980  0019E8  2E25               	decfsz	___ftdiv@cntr,f,c
  1981  0019EA  D7E7               	goto	l1767
  1982  0019EC  C026  F010         	movff	___ftdiv@f3,___ftpack@arg
  1983  0019F0  C027  F011         	movff	___ftdiv@f3+1,___ftpack@arg+1
  1984  0019F4  C028  F012         	movff	___ftdiv@f3+2,___ftpack@arg+2
  1985  0019F8  C029  F013         	movff	___ftdiv@exp,___ftpack@exp
  1986  0019FC  C02A  F014         	movff	___ftdiv@sign,___ftpack@sign
  1987  001A00  EC09  F00D         	call	___ftpack	;wreg free
  1988  001A04  C010  F01C         	movff	?___ftpack,?___ftdiv
  1989  001A08  C011  F01D         	movff	?___ftpack+1,?___ftdiv+1
  1990  001A0C  C012  F01E         	movff	?___ftpack+2,?___ftdiv+2
  1991  001A10  0012               	return	
  1992  001A12                     __end_of___ftdiv:
  1993                           	opt stack 0
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           prodh	equ	0xFF4
  1999                           prodl	equ	0xFF3
  2000                           intcon	equ	0xFF2
  2001                           intcon3	equ	0xFF0
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function ___awtoft *****************
  2007 ;; Defined at:
  2008 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  c               2   23[COMRAM] int 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;  sign            1   26[COMRAM] unsigned char 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  3   23[COMRAM] float 
  2015 ;; Registers used:
  2016 ;;		wreg, status,2, status,0, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2022 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;Total ram usage:        4 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    2
  2029 ;; This function calls:
  2030 ;;		___ftpack
  2031 ;; This function is called by:
  2032 ;;		_ultrasonicFindBottle
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text5
  2037  001EB4                     __ptext5:
  2038                           	opt stack 0
  2039  001EB4                     ___awtoft:
  2040                           	opt stack 26
  2041                           
  2042                           ;incstack = 0
  2043  001EB4  0E00               	movlw	0
  2044  001EB6  6E1B               	movwf	___awtoft@sign,c
  2045  001EB8  AE19               	btfss	___awtoft@c+1,7,c
  2046  001EBA  D006               	goto	l1789
  2047  001EBC  6C18               	negf	___awtoft@c,c
  2048  001EBE  1E19               	comf	___awtoft@c+1,f,c
  2049  001EC0  B0D8               	btfsc	status,0,c
  2050  001EC2  2A19               	incf	___awtoft@c+1,f,c
  2051  001EC4  0E01               	movlw	1
  2052  001EC6  6E1B               	movwf	___awtoft@sign,c
  2053  001EC8                     l1789:
  2054  001EC8  C018  F010         	movff	___awtoft@c,___ftpack@arg
  2055  001ECC  C019  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  2056  001ED0  6A12               	clrf	___ftpack@arg+2,c
  2057  001ED2  0E8E               	movlw	142
  2058  001ED4  6E13               	movwf	___ftpack@exp,c
  2059  001ED6  C01B  F014         	movff	___awtoft@sign,___ftpack@sign
  2060  001EDA  EC09  F00D         	call	___ftpack	;wreg free
  2061  001EDE  C010  F018         	movff	?___ftpack,?___awtoft
  2062  001EE2  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  2063  001EE6  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  2064  001EEA  0012               	return	
  2065  001EEC                     __end_of___awtoft:
  2066                           	opt stack 0
  2067                           tblptru	equ	0xFF8
  2068                           tblptrh	equ	0xFF7
  2069                           tblptrl	equ	0xFF6
  2070                           tablat	equ	0xFF5
  2071                           prodh	equ	0xFF4
  2072                           prodl	equ	0xFF3
  2073                           intcon	equ	0xFF2
  2074                           intcon3	equ	0xFF0
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           status	equ	0xFD8
  2078                           
  2079 ;; *************** function _rotate *****************
  2080 ;; Defined at:
  2081 ;;		line 60 in file "start.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;  degree          2   15[COMRAM] int 
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;  i               2   20[COMRAM] unsigned int 
  2086 ;;  j               2   18[COMRAM] unsigned int 
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  1    wreg      void 
  2089 ;; Registers used:
  2090 ;;		wreg, status,2, status,0
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2096 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;Total ram usage:        7 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    1
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_sort
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text6
  2111  001C8E                     __ptext6:
  2112                           	opt stack 0
  2113  001C8E                     _rotate:
  2114                           	opt stack 28
  2115                           
  2116                           ;start.c: 61: unsigned int i;
  2117                           ;start.c: 62: unsigned int j;
  2118                           ;start.c: 63: for (i = 0; i < 50; i++) {
  2119                           
  2120                           ;incstack = 0
  2121  001C8E  0E00               	movlw	0
  2122  001C90  6E16               	movwf	rotate@i+1,c
  2123  001C92  0E00               	movlw	0
  2124  001C94  6E15               	movwf	rotate@i,c
  2125  001C96                     l1877:
  2126  001C96  5016               	movf	rotate@i+1,w,c
  2127  001C98  E129               	bnz	l162
  2128  001C9A  0E32               	movlw	50
  2129  001C9C  5C15               	subwf	rotate@i,w,c
  2130  001C9E  B0D8               	btfsc	status,0,c
  2131  001CA0  0012               	return	
  2132                           
  2133                           ;start.c: 64: LATDbits.LATD3 = 1;
  2134  001CA2  868C               	bsf	3980,3,c	;volatile
  2135                           
  2136                           ;start.c: 65: _delay((unsigned long)((1500)*(8000000/4000000.0)));
  2137  001CA4  0E04               	movlw	4
  2138  001CA6  6E12               	movwf	??_rotate& (0+255),c
  2139  001CA8  0EE4               	movlw	228
  2140  001CAA                     u2087:
  2141  001CAA  2EE8               	decfsz	wreg,f,c
  2142  001CAC  D7FE               	bra	u2087
  2143  001CAE  2E12               	decfsz	??_rotate& (0+255),f,c
  2144  001CB0  D7FC               	bra	u2087
  2145  001CB2  D000               	nop2	
  2146                           
  2147                           ;start.c: 66: for (j = 0; j < degree; j++)
  2148  001CB4  0E00               	movlw	0
  2149  001CB6  6E14               	movwf	rotate@j+1,c
  2150  001CB8  0E00               	movlw	0
  2151  001CBA  6E13               	movwf	rotate@j,c
  2152  001CBC  D006               	goto	l159
  2153  001CBE                     l1885:
  2154                           
  2155                           ;start.c: 67: {
  2156                           ;start.c: 68: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2157  001CBE  0EC8               	movlw	200
  2158  001CC0                     u2097:
  2159  001CC0  D000               	nop2	
  2160  001CC2  2EE8               	decfsz	wreg,f,c
  2161  001CC4  D7FD               	bra	u2097
  2162  001CC6  4A13               	infsnz	rotate@j,f,c
  2163  001CC8  2A14               	incf	rotate@j+1,f,c
  2164  001CCA                     l159:
  2165  001CCA  5010               	movf	rotate@degree,w,c
  2166  001CCC  5C13               	subwf	rotate@j,w,c
  2167  001CCE  5011               	movf	rotate@degree+1,w,c
  2168  001CD0  5814               	subwfb	rotate@j+1,w,c
  2169  001CD2  A0D8               	btfss	status,0,c
  2170  001CD4  D7F4               	goto	l1885
  2171                           
  2172                           ;start.c: 69: }
  2173                           ;start.c: 70: LATDbits.LATD3 = 0;
  2174  001CD6  968C               	bcf	3980,3,c	;volatile
  2175                           
  2176                           ;start.c: 71: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  2177  001CD8  0E31               	movlw	49
  2178  001CDA  6E12               	movwf	??_rotate& (0+255),c
  2179  001CDC  0E0C               	movlw	12
  2180  001CDE                     u2107:
  2181  001CDE  2EE8               	decfsz	wreg,f,c
  2182  001CE0  D7FE               	bra	u2107
  2183  001CE2  2E12               	decfsz	??_rotate& (0+255),f,c
  2184  001CE4  D7FC               	bra	u2107
  2185  001CE6  4A15               	infsnz	rotate@i,f,c
  2186  001CE8  2A16               	incf	rotate@i+1,f,c
  2187  001CEA  D7D5               	goto	l1877
  2188  001CEC                     l162:
  2189  001CEC  0012               	return		;funcret
  2190  001CEE                     __end_of_rotate:
  2191                           	opt stack 0
  2192                           tblptru	equ	0xFF8
  2193                           tblptrh	equ	0xFF7
  2194                           tblptrl	equ	0xFF6
  2195                           tablat	equ	0xFF5
  2196                           prodh	equ	0xFF4
  2197                           prodl	equ	0xFF3
  2198                           intcon	equ	0xFF2
  2199                           intcon3	equ	0xFF0
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _resetCounts *****************
  2205 ;; Defined at:
  2206 ;;		line 19 in file "start.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, status,2
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;Total ram usage:        0 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    1
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_sort
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text7
  2235  001EEC                     __ptext7:
  2236                           	opt stack 0
  2237  001EEC                     _resetCounts:
  2238                           	opt stack 28
  2239                           
  2240                           ;start.c: 21: eskaCap = 0;
  2241                           
  2242                           ;incstack = 0
  2243  001EEC  0E00               	movlw	0
  2244  001EEE  6E60               	movwf	_eskaCap+1,c
  2245  001EF0  0E00               	movlw	0
  2246  001EF2  6E5F               	movwf	_eskaCap,c
  2247                           
  2248                           ;start.c: 22: eskaNoCap = 0;
  2249  001EF4  0E00               	movlw	0
  2250  001EF6  6E62               	movwf	_eskaNoCap+1,c
  2251  001EF8  0E00               	movlw	0
  2252  001EFA  6E61               	movwf	_eskaNoCap,c
  2253                           
  2254                           ;start.c: 23: yopCap = 0;
  2255  001EFC  0E00               	movlw	0
  2256  001EFE  6E66               	movwf	_yopCap+1,c
  2257  001F00  0E00               	movlw	0
  2258  001F02  6E65               	movwf	_yopCap,c
  2259                           
  2260                           ;start.c: 24: yopNoCap = 0;
  2261  001F04  0E00               	movlw	0
  2262  001F06  6E68               	movwf	_yopNoCap+1,c
  2263  001F08  0E00               	movlw	0
  2264  001F0A  6E67               	movwf	_yopNoCap,c
  2265                           
  2266                           ;start.c: 25: time = 0;
  2267  001F0C  0E00               	movlw	0
  2268  001F0E  6E64               	movwf	_time+1,c
  2269  001F10  0E00               	movlw	0
  2270  001F12  6E63               	movwf	_time,c
  2271  001F14  0012               	return		;funcret
  2272  001F16                     __end_of_resetCounts:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           intcon	equ	0xFF2
  2281                           intcon3	equ	0xFF0
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _displayLog *****************
  2287 ;; Defined at:
  2288 ;;		line 18 in file "logs.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  eskaCap         2   50[COMRAM] int 
  2291 ;;  eskaNoCap       2   52[COMRAM] int 
  2292 ;;  yopCap          2   54[COMRAM] int 
  2293 ;;  yopNoCap        2   56[COMRAM] int 
  2294 ;;  time            2   58[COMRAM] int 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;		None
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2306 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;Total ram usage:       10 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    4
  2313 ;; This function calls:
  2314 ;;		_lcdInst
  2315 ;;		_printf
  2316 ;; This function is called by:
  2317 ;;		_sort
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text8
  2322  001D96                     __ptext8:
  2323                           	opt stack 0
  2324  001D96                     _displayLog:
  2325                           	opt stack 25
  2326                           
  2327                           ;logs.c: 20: lcdInst (0b10000000);
  2328                           
  2329                           ;incstack = 0
  2330  001D96  0E80               	movlw	128
  2331  001D98  ECBF  F00F         	call	_lcdInst
  2332                           
  2333                           ;logs.c: 21: printf ("time elapsed: %d", time);
  2334  001D9C  0E37               	movlw	low STR_5
  2335  001D9E  6E21               	movwf	printf@f,c
  2336  001DA0  0E10               	movlw	high STR_5
  2337  001DA2  6E22               	movwf	printf@f+1,c
  2338  001DA4  C03B  F023         	movff	displayLog@time,?_printf+2
  2339  001DA8  C03C  F024         	movff	displayLog@time+1,?_printf+3
  2340  001DAC  EC8A  F00A         	call	_printf	;wreg free
  2341                           
  2342                           ;logs.c: 22: lcdInst(0b11000000);
  2343  001DB0  0EC0               	movlw	192
  2344  001DB2  ECBF  F00F         	call	_lcdInst
  2345                           
  2346                           ;logs.c: 23: printf("ec:%den:%dyc:%dyn:%d", eskaCap, eskaNoCap, yopCap, yopNoCap);
  2347  001DB6  0E22               	movlw	low STR_3
  2348  001DB8  6E21               	movwf	printf@f,c
  2349  001DBA  0E10               	movlw	high STR_3
  2350  001DBC  6E22               	movwf	printf@f+1,c
  2351  001DBE  C033  F023         	movff	displayLog@eskaCap,?_printf+2
  2352  001DC2  C034  F024         	movff	displayLog@eskaCap+1,?_printf+3
  2353  001DC6  C035  F025         	movff	displayLog@eskaNoCap,?_printf+4
  2354  001DCA  C036  F026         	movff	displayLog@eskaNoCap+1,?_printf+5
  2355  001DCE  C037  F027         	movff	displayLog@yopCap,?_printf+6
  2356  001DD2  C038  F028         	movff	displayLog@yopCap+1,?_printf+7
  2357  001DD6  C039  F029         	movff	displayLog@yopNoCap,?_printf+8
  2358  001DDA  C03A  F02A         	movff	displayLog@yopNoCap+1,?_printf+9
  2359  001DDE  EC8A  F00A         	call	_printf	;wreg free
  2360  001DE2  0012               	return		;funcret
  2361  001DE4                     __end_of_displayLog:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           prodh	equ	0xFF4
  2368                           prodl	equ	0xFF3
  2369                           intcon	equ	0xFF2
  2370                           intcon3	equ	0xFF0
  2371                           postinc0	equ	0xFEE
  2372                           wreg	equ	0xFE8
  2373                           status	equ	0xFD8
  2374                           
  2375 ;; *************** function ___lwtoft *****************
  2376 ;; Defined at:
  2377 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwtoft.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;  c               2   27[COMRAM] unsigned int 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  3   27[COMRAM] float 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2, status,0, cstack
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2391 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;Total ram usage:        3 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; Hardware stack levels required when called:    2
  2398 ;; This function calls:
  2399 ;;		___ftpack
  2400 ;; This function is called by:
  2401 ;;		_sort
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text9
  2406  001F40                     __ptext9:
  2407                           	opt stack 0
  2408  001F40                     ___lwtoft:
  2409                           	opt stack 27
  2410                           
  2411                           ;incstack = 0
  2412  001F40  C01C  F010         	movff	___lwtoft@c,___ftpack@arg
  2413  001F44  C01D  F011         	movff	___lwtoft@c+1,___ftpack@arg+1
  2414  001F48  6A12               	clrf	___ftpack@arg+2,c
  2415  001F4A  0E8E               	movlw	142
  2416  001F4C  6E13               	movwf	___ftpack@exp,c
  2417  001F4E  0E00               	movlw	0
  2418  001F50  6E14               	movwf	___ftpack@sign,c
  2419  001F52  EC09  F00D         	call	___ftpack	;wreg free
  2420  001F56  C010  F01C         	movff	?___ftpack,?___lwtoft
  2421  001F5A  C011  F01D         	movff	?___ftpack+1,?___lwtoft+1
  2422  001F5E  C012  F01E         	movff	?___ftpack+2,?___lwtoft+2
  2423  001F62  0012               	return	
  2424  001F64                     __end_of___lwtoft:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           intcon	equ	0xFF2
  2433                           intcon3	equ	0xFF0
  2434                           postinc0	equ	0xFEE
  2435                           wreg	equ	0xFE8
  2436                           status	equ	0xFD8
  2437                           
  2438 ;; *************** function ___ftmul *****************
  2439 ;; Defined at:
  2440 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  f1              3   30[COMRAM] float 
  2443 ;;  f2              3   33[COMRAM] float 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  f3_as_produc    3   40[COMRAM] unsigned um
  2446 ;;  sign            1   44[COMRAM] unsigned char 
  2447 ;;  cntr            1   43[COMRAM] unsigned char 
  2448 ;;  exp             1   39[COMRAM] unsigned char 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  3   30[COMRAM] float 
  2451 ;; Registers used:
  2452 ;;		wreg, status,2, status,0, cstack
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2458 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;Total ram usage:       15 bytes
  2463 ;; Hardware stack levels used:    1
  2464 ;; Hardware stack levels required when called:    2
  2465 ;; This function calls:
  2466 ;;		___ftpack
  2467 ;; This function is called by:
  2468 ;;		_sort
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text10
  2473  00174A                     __ptext10:
  2474                           	opt stack 0
  2475  00174A                     ___ftmul:
  2476                           	opt stack 27
  2477                           
  2478                           ;incstack = 0
  2479  00174A  C021  F025         	movff	___ftmul@f1+2,??___ftmul
  2480  00174E  6A26               	clrf	(??___ftmul+1)& (0+255),c
  2481  001750  6A27               	clrf	(??___ftmul+2)& (0+255),c
  2482  001752  3420               	rlcf	___ftmul@f1+1,w,c
  2483  001754  3625               	rlcf	??___ftmul& (0+255),f,c
  2484  001756  E301               	bnc	u1461
  2485  001758  8026               	bsf	(??___ftmul+1)& (0+255),0,c
  2486  00175A                     u1461:
  2487  00175A  5025               	movf	??___ftmul,w,c
  2488  00175C  6E28               	movwf	___ftmul@exp,c
  2489  00175E  5028               	movf	___ftmul@exp,w,c
  2490  001760  A4D8               	btfss	status,2,c
  2491  001762  D007               	goto	l1921
  2492  001764  0E00               	movlw	0
  2493  001766  6E1F               	movwf	?___ftmul,c
  2494  001768  0E00               	movlw	0
  2495  00176A  6E20               	movwf	?___ftmul+1,c
  2496  00176C  0E00               	movlw	0
  2497  00176E  6E21               	movwf	?___ftmul+2,c
  2498  001770  0012               	return	
  2499  001772                     l1921:
  2500  001772  C024  F025         	movff	___ftmul@f2+2,??___ftmul
  2501  001776  6A26               	clrf	(??___ftmul+1)& (0+255),c
  2502  001778  6A27               	clrf	(??___ftmul+2)& (0+255),c
  2503  00177A  3423               	rlcf	___ftmul@f2+1,w,c
  2504  00177C  3625               	rlcf	??___ftmul& (0+255),f,c
  2505  00177E  E301               	bnc	u1481
  2506  001780  8026               	bsf	(??___ftmul+1)& (0+255),0,c
  2507  001782                     u1481:
  2508  001782  5025               	movf	??___ftmul,w,c
  2509  001784  6E2D               	movwf	___ftmul@sign,c
  2510  001786  502D               	movf	___ftmul@sign,w,c
  2511  001788  A4D8               	btfss	status,2,c
  2512  00178A  D007               	goto	l1927
  2513  00178C  0E00               	movlw	0
  2514  00178E  6E1F               	movwf	?___ftmul,c
  2515  001790  0E00               	movlw	0
  2516  001792  6E20               	movwf	?___ftmul+1,c
  2517  001794  0E00               	movlw	0
  2518  001796  6E21               	movwf	?___ftmul+2,c
  2519  001798  0012               	return	
  2520  00179A                     l1927:
  2521  00179A  502D               	movf	___ftmul@sign,w,c
  2522  00179C  0F7B               	addlw	123
  2523  00179E  2628               	addwf	___ftmul@exp,f,c
  2524  0017A0  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
  2525  0017A4  5024               	movf	___ftmul@f2+2,w,c
  2526  0017A6  1A2D               	xorwf	___ftmul@sign,f,c
  2527  0017A8  0E80               	movlw	128
  2528  0017AA  162D               	andwf	___ftmul@sign,f,c
  2529  0017AC  8E20               	bsf	___ftmul@f1+1,7,c
  2530  0017AE  8E23               	bsf	___ftmul@f2+1,7,c
  2531  0017B0  0EFF               	movlw	255
  2532  0017B2  1622               	andwf	___ftmul@f2,f,c
  2533  0017B4  0EFF               	movlw	255
  2534  0017B6  1623               	andwf	___ftmul@f2+1,f,c
  2535  0017B8  0E00               	movlw	0
  2536  0017BA  1624               	andwf	___ftmul@f2+2,f,c
  2537  0017BC  0E00               	movlw	0
  2538  0017BE  6E29               	movwf	___ftmul@f3_as_product,c
  2539  0017C0  0E00               	movlw	0
  2540  0017C2  6E2A               	movwf	___ftmul@f3_as_product+1,c
  2541  0017C4  0E00               	movlw	0
  2542  0017C6  6E2B               	movwf	___ftmul@f3_as_product+2,c
  2543  0017C8  0E07               	movlw	7
  2544  0017CA  6E2C               	movwf	___ftmul@cntr,c
  2545  0017CC                     l1941:
  2546  0017CC  A01F               	btfss	___ftmul@f1,0,c
  2547  0017CE  D006               	goto	l1945
  2548  0017D0  5022               	movf	___ftmul@f2,w,c
  2549  0017D2  2629               	addwf	___ftmul@f3_as_product,f,c
  2550  0017D4  5023               	movf	___ftmul@f2+1,w,c
  2551  0017D6  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  2552  0017D8  5024               	movf	___ftmul@f2+2,w,c
  2553  0017DA  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  2554  0017DC                     l1945:
  2555  0017DC  90D8               	bcf	status,0,c
  2556  0017DE  3221               	rrcf	___ftmul@f1+2,f,c
  2557  0017E0  3220               	rrcf	___ftmul@f1+1,f,c
  2558  0017E2  321F               	rrcf	___ftmul@f1,f,c
  2559  0017E4  90D8               	bcf	status,0,c
  2560  0017E6  3622               	rlcf	___ftmul@f2,f,c
  2561  0017E8  3623               	rlcf	___ftmul@f2+1,f,c
  2562  0017EA  3624               	rlcf	___ftmul@f2+2,f,c
  2563  0017EC  2E2C               	decfsz	___ftmul@cntr,f,c
  2564  0017EE  D7EE               	goto	l1941
  2565  0017F0  0E09               	movlw	9
  2566  0017F2  6E2C               	movwf	___ftmul@cntr,c
  2567  0017F4                     l1951:
  2568  0017F4  A01F               	btfss	___ftmul@f1,0,c
  2569  0017F6  D006               	goto	l1955
  2570  0017F8  5022               	movf	___ftmul@f2,w,c
  2571  0017FA  2629               	addwf	___ftmul@f3_as_product,f,c
  2572  0017FC  5023               	movf	___ftmul@f2+1,w,c
  2573  0017FE  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  2574  001800  5024               	movf	___ftmul@f2+2,w,c
  2575  001802  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  2576  001804                     l1955:
  2577  001804  90D8               	bcf	status,0,c
  2578  001806  3221               	rrcf	___ftmul@f1+2,f,c
  2579  001808  3220               	rrcf	___ftmul@f1+1,f,c
  2580  00180A  321F               	rrcf	___ftmul@f1,f,c
  2581  00180C  90D8               	bcf	status,0,c
  2582  00180E  322B               	rrcf	___ftmul@f3_as_product+2,f,c
  2583  001810  322A               	rrcf	___ftmul@f3_as_product+1,f,c
  2584  001812  3229               	rrcf	___ftmul@f3_as_product,f,c
  2585  001814  2E2C               	decfsz	___ftmul@cntr,f,c
  2586  001816  D7EE               	goto	l1951
  2587  001818  C029  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
  2588  00181C  C02A  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2589  001820  C02B  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2590  001824  C028  F013         	movff	___ftmul@exp,___ftpack@exp
  2591  001828  C02D  F014         	movff	___ftmul@sign,___ftpack@sign
  2592  00182C  EC09  F00D         	call	___ftpack	;wreg free
  2593  001830  C010  F01F         	movff	?___ftpack,?___ftmul
  2594  001834  C011  F020         	movff	?___ftpack+1,?___ftmul+1
  2595  001838  C012  F021         	movff	?___ftpack+2,?___ftmul+2
  2596  00183C  0012               	return	
  2597  00183E                     __end_of___ftmul:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           tblptrh	equ	0xFF7
  2601                           tblptrl	equ	0xFF6
  2602                           tablat	equ	0xFF5
  2603                           prodh	equ	0xFF4
  2604                           prodl	equ	0xFF3
  2605                           intcon	equ	0xFF2
  2606                           intcon3	equ	0xFF0
  2607                           postinc0	equ	0xFEE
  2608                           wreg	equ	0xFE8
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function ___ftpack *****************
  2612 ;; Defined at:
  2613 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  arg             3   15[COMRAM] unsigned um
  2616 ;;  exp             1   18[COMRAM] unsigned char 
  2617 ;;  sign            1   19[COMRAM] unsigned char 
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  3   15[COMRAM] float 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2, status,0
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2629 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;Total ram usage:        8 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    1
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		___awtoft
  2640 ;;		___ftdiv
  2641 ;;		___ftmul
  2642 ;;		___lwtoft
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text11
  2647  001A12                     __ptext11:
  2648                           	opt stack 0
  2649  001A12                     ___ftpack:
  2650                           	opt stack 26
  2651                           
  2652                           ;incstack = 0
  2653  001A12  5013               	movf	___ftpack@exp,w,c
  2654  001A14  B4D8               	btfsc	status,2,c
  2655  001A16  D005               	goto	l1609
  2656  001A18  5010               	movf	___ftpack@arg,w,c
  2657  001A1A  1011               	iorwf	___ftpack@arg+1,w,c
  2658  001A1C  1012               	iorwf	___ftpack@arg+2,w,c
  2659  001A1E  A4D8               	btfss	status,2,c
  2660  001A20  D00C               	goto	l1615
  2661  001A22                     l1609:
  2662  001A22  0E00               	movlw	0
  2663  001A24  6E10               	movwf	?___ftpack,c
  2664  001A26  0E00               	movlw	0
  2665  001A28  6E11               	movwf	?___ftpack+1,c
  2666  001A2A  0E00               	movlw	0
  2667  001A2C  6E12               	movwf	?___ftpack+2,c
  2668  001A2E  0012               	return	
  2669  001A30                     l1613:
  2670  001A30  2A13               	incf	___ftpack@exp,f,c
  2671  001A32  90D8               	bcf	status,0,c
  2672  001A34  3212               	rrcf	___ftpack@arg+2,f,c
  2673  001A36  3211               	rrcf	___ftpack@arg+1,f,c
  2674  001A38  3210               	rrcf	___ftpack@arg,f,c
  2675  001A3A                     l1615:
  2676  001A3A  0E00               	movlw	0
  2677  001A3C  1410               	andwf	___ftpack@arg,w,c
  2678  001A3E  6E15               	movwf	??___ftpack& (0+255),c
  2679  001A40  0E00               	movlw	0
  2680  001A42  1411               	andwf	___ftpack@arg+1,w,c
  2681  001A44  6E16               	movwf	(??___ftpack+1)& (0+255),c
  2682  001A46  0EFE               	movlw	254
  2683  001A48  1412               	andwf	___ftpack@arg+2,w,c
  2684  001A4A  6E17               	movwf	(??___ftpack+2)& (0+255),c
  2685  001A4C  5015               	movf	??___ftpack,w,c
  2686  001A4E  1016               	iorwf	??___ftpack+1,w,c
  2687  001A50  1017               	iorwf	??___ftpack+2,w,c
  2688  001A52  B4D8               	btfsc	status,2,c
  2689  001A54  D00C               	goto	l1621
  2690  001A56  D7EC               	goto	l1613
  2691  001A58                     l1617:
  2692  001A58  2A13               	incf	___ftpack@exp,f,c
  2693  001A5A  0E01               	movlw	1
  2694  001A5C  2610               	addwf	___ftpack@arg,f,c
  2695  001A5E  0E00               	movlw	0
  2696  001A60  2211               	addwfc	___ftpack@arg+1,f,c
  2697  001A62  0E00               	movlw	0
  2698  001A64  2212               	addwfc	___ftpack@arg+2,f,c
  2699  001A66  90D8               	bcf	status,0,c
  2700  001A68  3212               	rrcf	___ftpack@arg+2,f,c
  2701  001A6A  3211               	rrcf	___ftpack@arg+1,f,c
  2702  001A6C  3210               	rrcf	___ftpack@arg,f,c
  2703  001A6E                     l1621:
  2704  001A6E  0E00               	movlw	0
  2705  001A70  1410               	andwf	___ftpack@arg,w,c
  2706  001A72  6E15               	movwf	??___ftpack& (0+255),c
  2707  001A74  0E00               	movlw	0
  2708  001A76  1411               	andwf	___ftpack@arg+1,w,c
  2709  001A78  6E16               	movwf	(??___ftpack+1)& (0+255),c
  2710  001A7A  0EFF               	movlw	255
  2711  001A7C  1412               	andwf	___ftpack@arg+2,w,c
  2712  001A7E  6E17               	movwf	(??___ftpack+2)& (0+255),c
  2713  001A80  5015               	movf	??___ftpack,w,c
  2714  001A82  1016               	iorwf	??___ftpack+1,w,c
  2715  001A84  1017               	iorwf	??___ftpack+2,w,c
  2716  001A86  B4D8               	btfsc	status,2,c
  2717  001A88  D006               	goto	l1625
  2718  001A8A  D7E6               	goto	l1617
  2719  001A8C                     l1623:
  2720  001A8C  0613               	decf	___ftpack@exp,f,c
  2721  001A8E  90D8               	bcf	status,0,c
  2722  001A90  3610               	rlcf	___ftpack@arg,f,c
  2723  001A92  3611               	rlcf	___ftpack@arg+1,f,c
  2724  001A94  3612               	rlcf	___ftpack@arg+2,f,c
  2725  001A96                     l1625:
  2726  001A96  BE11               	btfsc	___ftpack@arg+1,7,c
  2727  001A98  D003               	goto	l512
  2728  001A9A  0E02               	movlw	2
  2729  001A9C  6013               	cpfslt	___ftpack@exp,c
  2730  001A9E  D7F6               	goto	l1623
  2731  001AA0                     l512:
  2732  001AA0  A013               	btfss	___ftpack@exp,0,c
  2733  001AA2  9E11               	bcf	___ftpack@arg+1,7,c
  2734  001AA4  90D8               	bcf	status,0,c
  2735  001AA6  3213               	rrcf	___ftpack@exp,f,c
  2736  001AA8  5013               	movf	___ftpack@exp,w,c
  2737  001AAA  1212               	iorwf	___ftpack@arg+2,f,c
  2738  001AAC  5014               	movf	___ftpack@sign,w,c
  2739  001AAE  A4D8               	btfss	status,2,c
  2740  001AB0  8E12               	bsf	___ftpack@arg+2,7,c
  2741  001AB2  C010  F010         	movff	___ftpack@arg,?___ftpack
  2742  001AB6  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
  2743  001ABA  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
  2744  001ABE  0012               	return	
  2745  001AC0                     __end_of___ftpack:
  2746                           	opt stack 0
  2747                           tblptru	equ	0xFF8
  2748                           tblptrh	equ	0xFF7
  2749                           tblptrl	equ	0xFF6
  2750                           tablat	equ	0xFF5
  2751                           prodh	equ	0xFF4
  2752                           prodl	equ	0xFF3
  2753                           intcon	equ	0xFF2
  2754                           intcon3	equ	0xFF0
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function ___ftge *****************
  2760 ;; Defined at:
  2761 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  ff1             3   15[COMRAM] float 
  2764 ;;  ff2             3   18[COMRAM] float 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;		None               void
  2769 ;; Registers used:
  2770 ;;		wreg, status,2, status,0
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2776 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2780 ;;Total ram usage:        9 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    1
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_sort
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text12
  2791  001BFE                     __ptext12:
  2792                           	opt stack 0
  2793  001BFE                     ___ftge:
  2794                           	opt stack 28
  2795                           
  2796                           ;incstack = 0
  2797  001BFE  AE12               	btfss	___ftge@ff1+2,7,c
  2798  001C00  D016               	goto	l1967
  2799  001C02  C010  F016         	movff	___ftge@ff1,??___ftge
  2800  001C06  C011  F017         	movff	___ftge@ff1+1,??___ftge+1
  2801  001C0A  C012  F018         	movff	___ftge@ff1+2,??___ftge+2
  2802  001C0E  1E16               	comf	??___ftge,f,c
  2803  001C10  1E17               	comf	??___ftge+1,f,c
  2804  001C12  1E18               	comf	??___ftge+2,f,c
  2805  001C14  2A16               	incf	??___ftge,f,c
  2806  001C16  0E00               	movlw	0
  2807  001C18  2217               	addwfc	??___ftge+1,f,c
  2808  001C1A  2218               	addwfc	??___ftge+2,f,c
  2809  001C1C  0E00               	movlw	0
  2810  001C1E  2416               	addwf	??___ftge,w,c
  2811  001C20  6E10               	movwf	___ftge@ff1,c
  2812  001C22  0E00               	movlw	0
  2813  001C24  2017               	addwfc	??___ftge+1,w,c
  2814  001C26  6E11               	movwf	___ftge@ff1+1,c
  2815  001C28  0E80               	movlw	128
  2816  001C2A  2018               	addwfc	??___ftge+2,w,c
  2817  001C2C  6E12               	movwf	___ftge@ff1+2,c
  2818  001C2E                     l1967:
  2819  001C2E  AE15               	btfss	___ftge@ff2+2,7,c
  2820  001C30  D016               	goto	l1971
  2821  001C32  C013  F016         	movff	___ftge@ff2,??___ftge
  2822  001C36  C014  F017         	movff	___ftge@ff2+1,??___ftge+1
  2823  001C3A  C015  F018         	movff	___ftge@ff2+2,??___ftge+2
  2824  001C3E  1E16               	comf	??___ftge,f,c
  2825  001C40  1E17               	comf	??___ftge+1,f,c
  2826  001C42  1E18               	comf	??___ftge+2,f,c
  2827  001C44  2A16               	incf	??___ftge,f,c
  2828  001C46  0E00               	movlw	0
  2829  001C48  2217               	addwfc	??___ftge+1,f,c
  2830  001C4A  2218               	addwfc	??___ftge+2,f,c
  2831  001C4C  0E00               	movlw	0
  2832  001C4E  2416               	addwf	??___ftge,w,c
  2833  001C50  6E13               	movwf	___ftge@ff2,c
  2834  001C52  0E00               	movlw	0
  2835  001C54  2017               	addwfc	??___ftge+1,w,c
  2836  001C56  6E14               	movwf	___ftge@ff2+1,c
  2837  001C58  0E80               	movlw	128
  2838  001C5A  2018               	addwfc	??___ftge+2,w,c
  2839  001C5C  6E15               	movwf	___ftge@ff2+2,c
  2840  001C5E                     l1971:
  2841  001C5E  0E00               	movlw	0
  2842  001C60  1A10               	xorwf	___ftge@ff1,f,c
  2843  001C62  0E00               	movlw	0
  2844  001C64  1A11               	xorwf	___ftge@ff1+1,f,c
  2845  001C66  0E80               	movlw	128
  2846  001C68  1A12               	xorwf	___ftge@ff1+2,f,c
  2847  001C6A  0E00               	movlw	0
  2848  001C6C  1A13               	xorwf	___ftge@ff2,f,c
  2849  001C6E  0E00               	movlw	0
  2850  001C70  1A14               	xorwf	___ftge@ff2+1,f,c
  2851  001C72  0E80               	movlw	128
  2852  001C74  1A15               	xorwf	___ftge@ff2+2,f,c
  2853  001C76  5013               	movf	___ftge@ff2,w,c
  2854  001C78  5C10               	subwf	___ftge@ff1,w,c
  2855  001C7A  5014               	movf	___ftge@ff2+1,w,c
  2856  001C7C  5811               	subwfb	___ftge@ff1+1,w,c
  2857  001C7E  5015               	movf	___ftge@ff2+2,w,c
  2858  001C80  5812               	subwfb	___ftge@ff1+2,w,c
  2859  001C82  B0D8               	btfsc	status,0,c
  2860  001C84  D002               	goto	l1977
  2861  001C86  90D8               	bcf	status,0,c
  2862  001C88  0012               	return	
  2863  001C8A                     l1977:
  2864  001C8A  80D8               	bsf	status,0,c
  2865  001C8C  0012               	return	
  2866  001C8E                     __end_of___ftge:
  2867                           	opt stack 0
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           prodh	equ	0xFF4
  2873                           prodl	equ	0xFF3
  2874                           intcon	equ	0xFF2
  2875                           intcon3	equ	0xFF0
  2876                           postinc0	equ	0xFEE
  2877                           wreg	equ	0xFE8
  2878                           status	equ	0xFD8
  2879                           
  2880 ;; *************** function _ADC_Read *****************
  2881 ;; Defined at:
  2882 ;;		line 75 in file "start.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  channel         1    wreg     unsigned char 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  channel         1   19[COMRAM] unsigned char 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  2   15[COMRAM] unsigned int 
  2889 ;; Registers used:
  2890 ;;		wreg, status,2, status,0
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;Total ram usage:        5 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    1
  2903 ;; This function calls:
  2904 ;;		Nothing
  2905 ;; This function is called by:
  2906 ;;		_sort
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text13
  2911  001DE4                     __ptext13:
  2912                           	opt stack 0
  2913  001DE4                     _ADC_Read:
  2914                           	opt stack 28
  2915                           
  2916                           ;incstack = 0
  2917                           ;ADC_Read@channel stored from wreg
  2918  001DE4  6E14               	movwf	ADC_Read@channel,c
  2919                           
  2920                           ;start.c: 77: if(channel > 1)
  2921  001DE6  0E01               	movlw	1
  2922  001DE8  6414               	cpfsgt	ADC_Read@channel,c
  2923  001DEA  D005               	goto	l1899
  2924                           
  2925                           ;start.c: 78: return 0;
  2926  001DEC  0E00               	movlw	0
  2927  001DEE  6E11               	movwf	?_ADC_Read+1,c
  2928  001DF0  0E00               	movlw	0
  2929  001DF2  6E10               	movwf	?_ADC_Read,c
  2930  001DF4  0012               	return	
  2931  001DF6                     l1899:
  2932                           
  2933                           ;start.c: 80: ADCON0 &= 0xC5;
  2934  001DF6  0EC5               	movlw	197
  2935  001DF8  16C2               	andwf	4034,f,c	;volatile
  2936                           
  2937                           ;start.c: 81: ADCON0 |= channel<<3;
  2938  001DFA  3814               	swapf	ADC_Read@channel,w,c
  2939  001DFC  42E8               	rrncf	wreg,f,c
  2940  001DFE  0BF8               	andlw	248
  2941  001E00  12C2               	iorwf	4034,f,c	;volatile
  2942                           
  2943                           ;start.c: 82: _delay((unsigned long)((2)*(8000000/4000.0)));
  2944  001E02  0E06               	movlw	6
  2945  001E04  6E12               	movwf	??_ADC_Read& (0+255),c
  2946  001E06  0E30               	movlw	48
  2947  001E08                     u2117:
  2948  001E08  2EE8               	decfsz	wreg,f,c
  2949  001E0A  D7FE               	bra	u2117
  2950  001E0C  2E12               	decfsz	??_ADC_Read& (0+255),f,c
  2951  001E0E  D7FC               	bra	u2117
  2952  001E10  D000               	nop2	
  2953                           
  2954                           ;start.c: 83: ADCON0bits.GO = 1;
  2955  001E12  82C2               	bsf	4034,1,c	;volatile
  2956  001E14                     l167:
  2957  001E14  B2C2               	btfsc	4034,1,c	;volatile
  2958  001E16  D7FE               	goto	l167
  2959                           
  2960                           ;start.c: 85: return ((ADRESH<<8)+ADRESL);
  2961  001E18  50C4               	movf	4036,w,c	;volatile
  2962  001E1A  6E13               	movwf	(??_ADC_Read+1)& (0+255),c
  2963  001E1C  6A12               	clrf	??_ADC_Read& (0+255),c
  2964  001E1E  50C3               	movf	4035,w,c	;volatile
  2965  001E20  2412               	addwf	??_ADC_Read,w,c
  2966  001E22  6E10               	movwf	?_ADC_Read,c
  2967  001E24  0E00               	movlw	0
  2968  001E26  2013               	addwfc	??_ADC_Read+1,w,c
  2969  001E28  6E11               	movwf	?_ADC_Read+1,c
  2970  001E2A  0012               	return	
  2971  001E2C                     __end_of_ADC_Read:
  2972                           	opt stack 0
  2973                           tblptru	equ	0xFF8
  2974                           tblptrh	equ	0xFF7
  2975                           tblptrl	equ	0xFF6
  2976                           tablat	equ	0xFF5
  2977                           prodh	equ	0xFF4
  2978                           prodl	equ	0xFF3
  2979                           intcon	equ	0xFF2
  2980                           intcon3	equ	0xFF0
  2981                           postinc0	equ	0xFEE
  2982                           wreg	equ	0xFE8
  2983                           status	equ	0xFD8
  2984                           
  2985 ;; *************** function _showLogMenu *****************
  2986 ;; Defined at:
  2987 ;;		line 26 in file "logs.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;		None
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  temp2           1   53[COMRAM] unsigned char 
  2992 ;;  press1          1   52[COMRAM] unsigned char 
  2993 ;;  topItem         2   56[COMRAM] int 
  2994 ;;  pointer         2   54[COMRAM] int 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;Total ram usage:        8 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    4
  3011 ;; This function calls:
  3012 ;;		_initLCD
  3013 ;;		_lcdInst
  3014 ;;		_printf
  3015 ;;		_putch
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text14
  3022  0013D2                     __ptext14:
  3023                           	opt stack 0
  3024  0013D2                     _showLogMenu:
  3025                           	opt stack 26
  3026                           
  3027                           ;logs.c: 28: int pointer = 0;
  3028                           
  3029                           ;incstack = 0
  3030  0013D2  0E00               	movlw	0
  3031  0013D4  6E38               	movwf	showLogMenu@pointer+1,c
  3032  0013D6  0E00               	movlw	0
  3033  0013D8  6E37               	movwf	showLogMenu@pointer,c
  3034                           
  3035                           ;logs.c: 29: int topItem = 0;
  3036  0013DA  0E00               	movlw	0
  3037  0013DC  6E3A               	movwf	showLogMenu@topItem+1,c
  3038  0013DE  0E00               	movlw	0
  3039  0013E0  6E39               	movwf	showLogMenu@topItem,c
  3040  0013E2                     l2157:
  3041                           
  3042                           ;logs.c: 32: {
  3043                           ;logs.c: 33: initLCD();
  3044  0013E2  EC16  F00F         	call	_initLCD	;wreg free
  3045                           
  3046                           ;logs.c: 34: lcdInst (0b10000000);
  3047  0013E6  0E80               	movlw	128
  3048  0013E8  ECBF  F00F         	call	_lcdInst
  3049                           
  3050                           ;logs.c: 35: printf ("Item: %c", itemArray[topItem]);
  3051  0013EC  0E62               	movlw	low STR_7
  3052  0013EE  6E21               	movwf	printf@f,c
  3053  0013F0  0E10               	movlw	high STR_7
  3054  0013F2  6E22               	movwf	printf@f+1,c
  3055  0013F4  0E1C               	movlw	low _itemArray
  3056  0013F6  2439               	addwf	showLogMenu@topItem,w,c
  3057  0013F8  6EF6               	movwf	tblptrl,c
  3058  0013FA  0E10               	movlw	high _itemArray
  3059  0013FC  203A               	addwfc	showLogMenu@topItem+1,w,c
  3060  0013FE  6EF7               	movwf	tblptrh,c
  3061  001400                     	if	0	;There are less than 3 active tblptr bytes
  3062  001400                     	endif
  3063  001400  0008               	tblrd		*
  3064  001402  50F5               	movf	tablat,w,c
  3065  001404  6E23               	movwf	?_printf+2,c
  3066  001406  6A24               	clrf	?_printf+3,c
  3067  001408  EC8A  F00A         	call	_printf	;wreg free
  3068                           
  3069                           ;logs.c: 36: lcdInst (0b11000000);
  3070  00140C  0EC0               	movlw	192
  3071  00140E  ECBF  F00F         	call	_lcdInst
  3072                           
  3073                           ;logs.c: 37: if (topItem != 3)
  3074  001412  0E03               	movlw	3
  3075  001414  1839               	xorwf	showLogMenu@topItem,w,c
  3076  001416  103A               	iorwf	showLogMenu@topItem+1,w,c
  3077  001418  B4D8               	btfsc	status,2,c
  3078  00141A  D017               	goto	l2169
  3079                           
  3080                           ;logs.c: 38: printf ("Item: %c", itemArray[topItem+1]);
  3081  00141C  0E62               	movlw	low STR_7
  3082  00141E  6E21               	movwf	printf@f,c
  3083  001420  0E10               	movlw	high STR_7
  3084  001422  6E22               	movwf	printf@f+1,c
  3085  001424  0E01               	movlw	1
  3086  001426  2439               	addwf	showLogMenu@topItem,w,c
  3087  001428  6E33               	movwf	??_showLogMenu& (0+255),c
  3088  00142A  0E00               	movlw	0
  3089  00142C  203A               	addwfc	showLogMenu@topItem+1,w,c
  3090  00142E  6E34               	movwf	(??_showLogMenu+1)& (0+255),c
  3091  001430  0E1C               	movlw	low _itemArray
  3092  001432  2433               	addwf	??_showLogMenu,w,c
  3093  001434  6EF6               	movwf	tblptrl,c
  3094  001436  0E10               	movlw	high _itemArray
  3095  001438  2034               	addwfc	??_showLogMenu+1,w,c
  3096  00143A  6EF7               	movwf	tblptrh,c
  3097  00143C                     	if	0	;There are less than 3 active tblptr bytes
  3098  00143C                     	endif
  3099  00143C  0008               	tblrd		*
  3100  00143E  50F5               	movf	tablat,w,c
  3101  001440  6E23               	movwf	?_printf+2,c
  3102  001442  6A24               	clrf	?_printf+3,c
  3103  001444  EC8A  F00A         	call	_printf	;wreg free
  3104  001448  D006               	goto	l2171
  3105  00144A                     l2169:
  3106                           
  3107                           ;logs.c: 39: else
  3108                           ;logs.c: 40: printf ("Exit");
  3109  00144A  0E6B               	movlw	low STR_9
  3110  00144C  6E21               	movwf	printf@f,c
  3111  00144E  0E10               	movlw	high STR_9
  3112  001450  6E22               	movwf	printf@f+1,c
  3113  001452  EC8A  F00A         	call	_printf	;wreg free
  3114  001456                     l2171:
  3115                           
  3116                           ;logs.c: 42: if (pointer == 0)
  3117  001456  5037               	movf	showLogMenu@pointer,w,c
  3118  001458  1038               	iorwf	showLogMenu@pointer+1,w,c
  3119  00145A  A4D8               	btfss	status,2,c
  3120  00145C  D004               	goto	l2175
  3121                           
  3122                           ;logs.c: 43: lcdInst (0b10001111);
  3123  00145E  0E8F               	movlw	143
  3124  001460  ECBF  F00F         	call	_lcdInst
  3125  001464  D003               	goto	l235
  3126  001466                     l2175:
  3127                           
  3128                           ;logs.c: 44: else
  3129                           ;logs.c: 45: lcdInst (0b11001111);
  3130  001466  0ECF               	movlw	207
  3131  001468  ECBF  F00F         	call	_lcdInst
  3132  00146C                     l235:
  3133                           
  3134                           ;logs.c: 47: putch ('<');
  3135  00146C  0E3C               	movlw	60
  3136  00146E  ECC5  F00F         	call	_putch
  3137  001472                     l236:
  3138  001472  A281               	btfss	3969,1,c	;volatile
  3139  001474  D7FE               	goto	l236
  3140                           
  3141                           ;logs.c: 50: unsigned char press1 =(PORTB & 0xF0)>>4;
  3142  001476  3881               	swapf	3969,w,c	;volatile
  3143  001478  0B0F               	andlw	15
  3144  00147A  0B0F               	andlw	15
  3145  00147C  6E35               	movwf	showLogMenu@press1,c
  3146  00147E                     l239:
  3147  00147E  B281               	btfsc	3969,1,c	;volatile
  3148  001480  D7FE               	goto	l239
  3149                           
  3150                           ;logs.c: 52: __nop();
  3151  001482  F000               	nop	
  3152                           
  3153                           ;logs.c: 53: __nop();
  3154  001484  F000               	nop	
  3155                           
  3156                           ;logs.c: 54: unsigned char temp2= keys[press1];
  3157  001486  5035               	movf	showLogMenu@press1,w,c
  3158  001488  0D01               	mullw	1
  3159  00148A  0E01               	movlw	low _keys
  3160  00148C  24F3               	addwf	prodl,w,c
  3161  00148E  6EF6               	movwf	tblptrl,c
  3162  001490  0E10               	movlw	high _keys
  3163  001492  20F4               	addwfc	prodh,w,c
  3164  001494  6EF7               	movwf	tblptrh,c
  3165  001496                     	if	0	;There are less than 3 active tblptr bytes
  3166  001496                     	endif
  3167  001496  0008               	tblrd		*
  3168  001498  CFF5 F036          	movff	tablat,showLogMenu@temp2
  3169                           
  3170                           ;logs.c: 56: if (temp2 == 'A'){
  3171  00149C  0E41               	movlw	65
  3172  00149E  1836               	xorwf	showLogMenu@temp2,w,c
  3173  0014A0  A4D8               	btfss	status,2,c
  3174  0014A2  D011               	goto	l2191
  3175                           
  3176                           ;logs.c: 57: if (pointer == 1){ pointer = 0;}
  3177  0014A4  0437               	decf	showLogMenu@pointer,w,c
  3178  0014A6  1038               	iorwf	showLogMenu@pointer+1,w,c
  3179  0014A8  A4D8               	btfss	status,2,c
  3180  0014AA  D004               	goto	l2187
  3181  0014AC  0E00               	movlw	0
  3182  0014AE  6E38               	movwf	showLogMenu@pointer+1,c
  3183  0014B0  0E00               	movlw	0
  3184  0014B2  D014               	goto	L8
  3185  0014B4                     l2187:
  3186                           
  3187                           ;logs.c: 58: else{
  3188                           ;logs.c: 59: if (topItem != 0) { topItem = topItem - 1; }
  3189  0014B4  5039               	movf	showLogMenu@topItem,w,c
  3190  0014B6  103A               	iorwf	showLogMenu@topItem+1,w,c
  3191  0014B8  B4D8               	btfsc	status,2,c
  3192  0014BA  D793               	goto	l2157
  3193  0014BC  0EFF               	movlw	255
  3194  0014BE  2439               	addwf	showLogMenu@topItem,w,c
  3195  0014C0  6E39               	movwf	showLogMenu@topItem,c
  3196  0014C2  0EFF               	movlw	255
  3197  0014C4  D016               	goto	L9
  3198  0014C6                     l2191:
  3199                           
  3200                           ;logs.c: 62: else if (temp2 == 'B'){
  3201  0014C6  0E42               	movlw	66
  3202  0014C8  1836               	xorwf	showLogMenu@temp2,w,c
  3203  0014CA  A4D8               	btfss	status,2,c
  3204  0014CC  D015               	goto	l2201
  3205                           
  3206                           ;logs.c: 63: if (pointer == 0){ pointer = 1; }
  3207  0014CE  5037               	movf	showLogMenu@pointer,w,c
  3208  0014D0  1038               	iorwf	showLogMenu@pointer+1,w,c
  3209  0014D2  A4D8               	btfss	status,2,c
  3210  0014D4  D005               	goto	l2197
  3211  0014D6  0E00               	movlw	0
  3212  0014D8  6E38               	movwf	showLogMenu@pointer+1,c
  3213  0014DA  0E01               	movlw	1
  3214  0014DC                     L8:
  3215  0014DC  6E37               	movwf	showLogMenu@pointer,c
  3216  0014DE  D781               	goto	l2157
  3217  0014E0                     l2197:
  3218                           
  3219                           ;logs.c: 64: else {
  3220                           ;logs.c: 65: if (topItem != 3) { topItem = topItem + 1; }
  3221  0014E0  0E03               	movlw	3
  3222  0014E2  1839               	xorwf	showLogMenu@topItem,w,c
  3223  0014E4  103A               	iorwf	showLogMenu@topItem+1,w,c
  3224  0014E6  B4D8               	btfsc	status,2,c
  3225  0014E8  D77C               	goto	l2157
  3226  0014EA  0E01               	movlw	1
  3227  0014EC  2439               	addwf	showLogMenu@topItem,w,c
  3228  0014EE  6E39               	movwf	showLogMenu@topItem,c
  3229  0014F0  0E00               	movlw	0
  3230  0014F2                     L9:
  3231  0014F2  203A               	addwfc	showLogMenu@topItem+1,w,c
  3232  0014F4  6E3A               	movwf	showLogMenu@topItem+1,c
  3233                           
  3234                           ;logs.c: 66: }
  3235                           ;logs.c: 67: }
  3236  0014F6  D775               	goto	l2157
  3237  0014F8                     l2201:
  3238                           
  3239                           ;logs.c: 68: else if (temp2 == 'C'){
  3240  0014F8  0E43               	movlw	67
  3241  0014FA  1836               	xorwf	showLogMenu@temp2,w,c
  3242  0014FC  A4D8               	btfss	status,2,c
  3243  0014FE  D771               	goto	l2157
  3244                           
  3245                           ;logs.c: 69: if (topItem == 3 & pointer == 1) return;
  3246  001500  0E03               	movlw	3
  3247  001502  1839               	xorwf	showLogMenu@topItem,w,c
  3248  001504  103A               	iorwf	showLogMenu@topItem+1,w,c
  3249  001506  A4D8               	btfss	status,2,c
  3250  001508  D76C               	goto	l2157
  3251  00150A  0437               	decf	showLogMenu@pointer,w,c
  3252  00150C  1038               	iorwf	showLogMenu@pointer+1,w,c
  3253  00150E  B4D8               	btfsc	status,2,c
  3254  001510  0012               	return	
  3255  001512  D767               	goto	l2157
  3256  001514                     __end_of_showLogMenu:
  3257                           	opt stack 0
  3258                           tblptru	equ	0xFF8
  3259                           tblptrh	equ	0xFF7
  3260                           tblptrl	equ	0xFF6
  3261                           tablat	equ	0xFF5
  3262                           prodh	equ	0xFF4
  3263                           prodl	equ	0xFF3
  3264                           intcon	equ	0xFF2
  3265                           intcon3	equ	0xFF0
  3266                           postinc0	equ	0xFEE
  3267                           wreg	equ	0xFE8
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _printf *****************
  3271 ;; Defined at:
  3272 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  f               2   32[COMRAM] PTR const unsigned char 
  3275 ;;		 -> STR_9(5), STR_8(9), STR_7(9), STR_6(21), 
  3276 ;;		 -> STR_5(17), STR_4(2), STR_3(21), 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  tmpval          4    0        struct .
  3279 ;;  cp              3    0        PTR const unsigned char 
  3280 ;;  val             2   47[COMRAM] unsigned int 
  3281 ;;  ap              2   45[COMRAM] PTR void [1]
  3282 ;;		 -> ?_printf(2), 
  3283 ;;  len             2    0        unsigned int 
  3284 ;;  c               1   49[COMRAM] char 
  3285 ;;  prec            1   44[COMRAM] char 
  3286 ;;  flag            1   43[COMRAM] unsigned char 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  2   32[COMRAM] int 
  3289 ;; Registers used:
  3290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3296 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3297 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;Total ram usage:       18 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    3
  3303 ;; This function calls:
  3304 ;;		___lwdiv
  3305 ;;		___lwmod
  3306 ;;		_putch
  3307 ;; This function is called by:
  3308 ;;		_sort
  3309 ;;		_displayLog
  3310 ;;		_showLogMenu
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text15
  3315  001514                     __ptext15:
  3316                           	opt stack 0
  3317  001514                     _printf:
  3318                           	opt stack 26
  3319                           
  3320                           ;doprnt.c: 466: va_list ap;
  3321                           ;doprnt.c: 499: signed char c;
  3322                           ;doprnt.c: 506: signed char prec;
  3323                           ;doprnt.c: 508: unsigned char flag;
  3324                           ;doprnt.c: 523: union {
  3325                           ;doprnt.c: 524: unsigned long vd;
  3326                           ;doprnt.c: 525: double integ;
  3327                           ;doprnt.c: 526: } tmpval;
  3328                           ;doprnt.c: 528: unsigned int val;
  3329                           ;doprnt.c: 529: unsigned len;
  3330                           ;doprnt.c: 530: const char * cp;
  3331                           ;doprnt.c: 533: *ap = __va_start();
  3332                           
  3333                           ;incstack = 0
  3334  001514  0E23               	movlw	low (?_printf+2)
  3335  001516  6E2E               	movwf	printf@ap,c
  3336  001518  0E00               	movlw	high (?_printf+2)
  3337  00151A  6E2F               	movwf	printf@ap+1,c
  3338                           
  3339                           ;doprnt.c: 536: while(c = *f++) {
  3340  00151C  D08F               	goto	l1733
  3341  00151E                     l1681:
  3342                           
  3343                           ;doprnt.c: 538: if(c != '%')
  3344  00151E  0E25               	movlw	37
  3345  001520  1832               	xorwf	printf@c,w,c
  3346  001522  B4D8               	btfsc	status,2,c
  3347  001524  D004               	goto	l1685
  3348                           
  3349                           ;doprnt.c: 540: {
  3350                           ;doprnt.c: 541: (putch(c) );
  3351  001526  5032               	movf	printf@c,w,c
  3352  001528  ECC5  F00F         	call	_putch
  3353                           
  3354                           ;doprnt.c: 542: continue;
  3355  00152C  D087               	goto	l1733
  3356  00152E                     l1685:
  3357                           
  3358                           ;doprnt.c: 543: }
  3359                           ;doprnt.c: 548: flag = 0;
  3360  00152E  0E00               	movlw	0
  3361  001530  6E2C               	movwf	printf@flag,c
  3362                           
  3363                           ;doprnt.c: 635: switch(c = *f++) {
  3364  001532  D00E               	goto	l1695
  3365  001534                     l1687:
  3366                           
  3367                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3368  001534  C02E  FFD9         	movff	printf@ap,fsr2l
  3369  001538  C02F  FFDA         	movff	printf@ap+1,fsr2h
  3370  00153C  50DF               	movf	indf2,w,c
  3371  00153E  6E32               	movwf	printf@c,c
  3372  001540  0E02               	movlw	2
  3373  001542  262E               	addwf	printf@ap,f,c
  3374  001544  0E00               	movlw	0
  3375  001546  222F               	addwfc	printf@ap+1,f,c
  3376  001548                     l1691:
  3377                           
  3378                           ;doprnt.c: 809: (putch(c) );
  3379  001548  5032               	movf	printf@c,w,c
  3380  00154A  ECC5  F00F         	call	_putch
  3381                           
  3382                           ;doprnt.c: 810: continue;
  3383  00154E  D076               	goto	l1733
  3384  001550                     l1695:
  3385  001550  C021  FFF6         	movff	printf@f,tblptrl
  3386  001554  C022  FFF7         	movff	printf@f+1,tblptrh
  3387  001558  4A21               	infsnz	printf@f,f,c
  3388  00155A  2A22               	incf	printf@f+1,f,c
  3389  00155C                     	if	0	;tblptru may be non-zero
  3390  00155C                     	endif
  3391  00155C                     	if	0	;tblptru may be non-zero
  3392  00155C                     	endif
  3393  00155C  0008               	tblrd		*
  3394  00155E  CFF5 F032          	movff	tablat,printf@c
  3395  001562  5032               	movf	printf@c,w,c
  3396                           
  3397                           ; Switch size 1, requested type "space"
  3398                           ; Number of cases is 4, Range of values is 0 to 105
  3399                           ; switch strategies available:
  3400                           ; Name         Instructions Cycles
  3401                           ; simple_byte           13     7 (average)
  3402                           ;	Chosen strategy is simple_byte
  3403  001564  0A00               	xorlw	0	; case 0
  3404  001566  B4D8               	btfsc	status,2,c
  3405  001568  0012               	return	
  3406  00156A  0A63               	xorlw	99	; case 99
  3407  00156C  B4D8               	btfsc	status,2,c
  3408  00156E  D7E2               	goto	l1687
  3409  001570  0A07               	xorlw	7	; case 100
  3410  001572  B4D8               	btfsc	status,2,c
  3411  001574  D003               	goto	l1697
  3412  001576  0A0D               	xorlw	13	; case 105
  3413  001578  A4D8               	btfss	status,2,c
  3414  00157A  D7E6               	goto	l1691
  3415  00157C                     l1697:
  3416                           
  3417                           ;doprnt.c: 1253: {
  3418                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3419  00157C  C02E  FFD9         	movff	printf@ap,fsr2l
  3420  001580  C02F  FFDA         	movff	printf@ap+1,fsr2h
  3421  001584  CFDE F030          	movff	postinc2,printf@val
  3422  001588  CFDD F031          	movff	postdec2,printf@val+1
  3423  00158C  0E02               	movlw	2
  3424  00158E  262E               	addwf	printf@ap,f,c
  3425  001590  0E00               	movlw	0
  3426  001592  222F               	addwfc	printf@ap+1,f,c
  3427                           
  3428                           ;doprnt.c: 1261: if((int)val < 0) {
  3429  001594  AE31               	btfss	printf@val+1,7,c
  3430  001596  D006               	goto	l1707
  3431                           
  3432                           ;doprnt.c: 1262: flag |= 0x03;
  3433  001598  0E03               	movlw	3
  3434  00159A  122C               	iorwf	printf@flag,f,c
  3435                           
  3436                           ;doprnt.c: 1263: val = -val;
  3437  00159C  6C30               	negf	printf@val,c
  3438  00159E  1E31               	comf	printf@val+1,f,c
  3439  0015A0  B0D8               	btfsc	status,0,c
  3440  0015A2  2A31               	incf	printf@val+1,f,c
  3441  0015A4                     l1707:
  3442                           
  3443                           ;doprnt.c: 1264: }
  3444                           ;doprnt.c: 1266: }
  3445                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3446  0015A4  0E01               	movlw	1
  3447  0015A6  6E32               	movwf	printf@c,c
  3448  0015A8                     l1709:
  3449  0015A8  0E05               	movlw	5
  3450  0015AA  1832               	xorwf	printf@c,w,c
  3451  0015AC  B4D8               	btfsc	status,2,c
  3452  0015AE  D012               	goto	l1721
  3453                           
  3454                           ;doprnt.c: 1306: if(val < dpowers[c])
  3455  0015B0  5032               	movf	printf@c,w,c
  3456  0015B2  0D02               	mullw	2
  3457  0015B4  0E12               	movlw	low _dpowers
  3458  0015B6  24F3               	addwf	prodl,w,c
  3459  0015B8  6EF6               	movwf	tblptrl,c
  3460  0015BA  0E10               	movlw	high _dpowers
  3461  0015BC  20F4               	addwfc	prodh,w,c
  3462  0015BE  6EF7               	movwf	tblptrh,c
  3463  0015C0                     	if	0	;There are less than 3 active tblptr bytes
  3464  0015C0                     	endif
  3465  0015C0  0009               	tblrd		*+
  3466  0015C2  50F5               	movf	tablat,w,c
  3467  0015C4  5C30               	subwf	printf@val,w,c
  3468  0015C6  0009               	tblrd		*+
  3469  0015C8  50F5               	movf	tablat,w,c
  3470  0015CA  5831               	subwfb	printf@val+1,w,c
  3471  0015CC  A0D8               	btfss	status,0,c
  3472  0015CE  D002               	goto	l1721
  3473                           
  3474                           ;doprnt.c: 1307: break;
  3475  0015D0  2A32               	incf	printf@c,f,c
  3476  0015D2  D7EA               	goto	l1709
  3477  0015D4                     l1721:
  3478                           
  3479                           ;doprnt.c: 1422: {
  3480                           ;doprnt.c: 1438: if(flag & 0x03)
  3481  0015D4  C02C  F02B         	movff	printf@flag,??_printf
  3482  0015D8  0E03               	movlw	3
  3483  0015DA  162B               	andwf	??_printf,f,c
  3484  0015DC  B4D8               	btfsc	status,2,c
  3485  0015DE  D003               	goto	l1725
  3486                           
  3487                           ;doprnt.c: 1439: (putch('-') );
  3488  0015E0  0E2D               	movlw	45
  3489  0015E2  ECC5  F00F         	call	_putch
  3490  0015E6                     l1725:
  3491                           
  3492                           ;doprnt.c: 1469: }
  3493                           ;doprnt.c: 1472: prec = c;
  3494  0015E6  C032  F02D         	movff	printf@c,printf@prec
  3495                           
  3496                           ;doprnt.c: 1474: while(prec--) {
  3497  0015EA  D024               	goto	l1731
  3498  0015EC                     l1727:
  3499                           
  3500                           ;doprnt.c: 1478: {
  3501                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3502  0015EC  502D               	movf	printf@prec,w,c
  3503  0015EE  0D02               	mullw	2
  3504  0015F0  0E12               	movlw	low _dpowers
  3505  0015F2  24F3               	addwf	prodl,w,c
  3506  0015F4  6EF6               	movwf	tblptrl,c
  3507  0015F6  0E10               	movlw	high _dpowers
  3508  0015F8  20F4               	addwfc	prodh,w,c
  3509  0015FA  6EF7               	movwf	tblptrh,c
  3510  0015FC                     	if	0	;There are less than 3 active tblptr bytes
  3511  0015FC                     	endif
  3512  0015FC  0009               	tblrd		*+
  3513  0015FE  CFF5 F017          	movff	tablat,___lwdiv@divisor
  3514  001602  000A               	tblrd		*-
  3515  001604  CFF5 F018          	movff	tablat,___lwdiv@divisor+1
  3516  001608  C030  F015         	movff	printf@val,___lwdiv@dividend
  3517  00160C  C031  F016         	movff	printf@val+1,___lwdiv@dividend+1
  3518  001610  ECA2  F00E         	call	___lwdiv	;wreg free
  3519  001614  C015  F01C         	movff	?___lwdiv,___lwmod@dividend
  3520  001618  C016  F01D         	movff	?___lwdiv+1,___lwmod@dividend+1
  3521  00161C  0E00               	movlw	0
  3522  00161E  6E1F               	movwf	___lwmod@divisor+1,c
  3523  001620  0E0A               	movlw	10
  3524  001622  6E1E               	movwf	___lwmod@divisor,c
  3525  001624  EC39  F00F         	call	___lwmod	;wreg free
  3526  001628  501C               	movf	?___lwmod,w,c
  3527  00162A  0F30               	addlw	48
  3528  00162C  6E32               	movwf	printf@c,c
  3529                           
  3530                           ;doprnt.c: 1523: }
  3531                           ;doprnt.c: 1524: (putch(c) );
  3532  00162E  5032               	movf	printf@c,w,c
  3533  001630  ECC5  F00F         	call	_putch
  3534  001634                     l1731:
  3535  001634  062D               	decf	printf@prec,f,c
  3536  001636  282D               	incf	printf@prec,w,c
  3537  001638  A4D8               	btfss	status,2,c
  3538  00163A  D7D8               	goto	l1727
  3539  00163C                     l1733:
  3540  00163C  C021  FFF6         	movff	printf@f,tblptrl
  3541  001640  C022  FFF7         	movff	printf@f+1,tblptrh
  3542  001644  4A21               	infsnz	printf@f,f,c
  3543  001646  2A22               	incf	printf@f+1,f,c
  3544  001648                     	if	0	;tblptru may be non-zero
  3545  001648                     	endif
  3546  001648                     	if	0	;tblptru may be non-zero
  3547  001648                     	endif
  3548  001648  0008               	tblrd		*
  3549  00164A  CFF5 F032          	movff	tablat,printf@c
  3550  00164E  5032               	movf	printf@c,w,c
  3551  001650  B4D8               	btfsc	status,2,c
  3552  001652  0012               	return	
  3553  001654  D764               	goto	l1681
  3554  001656                     __end_of_printf:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           intcon	equ	0xFF2
  3563                           intcon3	equ	0xFF0
  3564                           postinc0	equ	0xFEE
  3565                           wreg	equ	0xFE8
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function ___lwmod *****************
  3574 ;; Defined at:
  3575 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;  dividend        2   27[COMRAM] unsigned int 
  3578 ;;  divisor         2   29[COMRAM] unsigned int 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  counter         1   31[COMRAM] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  2   27[COMRAM] unsigned int 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3590 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;Total ram usage:        5 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    1
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_printf
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text16
  3605  001E72                     __ptext16:
  3606                           	opt stack 0
  3607  001E72                     ___lwmod:
  3608                           	opt stack 27
  3609                           
  3610                           ;incstack = 0
  3611  001E72  501E               	movf	___lwmod@divisor,w,c
  3612  001E74  101F               	iorwf	___lwmod@divisor+1,w,c
  3613  001E76  B4D8               	btfsc	status,2,c
  3614  001E78  D018               	goto	l700
  3615  001E7A  0E01               	movlw	1
  3616  001E7C  6E20               	movwf	___lwmod@counter,c
  3617  001E7E  D004               	goto	l1669
  3618  001E80                     l1667:
  3619  001E80  90D8               	bcf	status,0,c
  3620  001E82  361E               	rlcf	___lwmod@divisor,f,c
  3621  001E84  361F               	rlcf	___lwmod@divisor+1,f,c
  3622  001E86  2A20               	incf	___lwmod@counter,f,c
  3623  001E88                     l1669:
  3624  001E88  AE1F               	btfss	___lwmod@divisor+1,7,c
  3625  001E8A  D7FA               	goto	l1667
  3626  001E8C                     l1671:
  3627  001E8C  501E               	movf	___lwmod@divisor,w,c
  3628  001E8E  5C1C               	subwf	___lwmod@dividend,w,c
  3629  001E90  501F               	movf	___lwmod@divisor+1,w,c
  3630  001E92  581D               	subwfb	___lwmod@dividend+1,w,c
  3631  001E94  A0D8               	btfss	status,0,c
  3632  001E96  D004               	goto	l1675
  3633  001E98  501E               	movf	___lwmod@divisor,w,c
  3634  001E9A  5E1C               	subwf	___lwmod@dividend,f,c
  3635  001E9C  501F               	movf	___lwmod@divisor+1,w,c
  3636  001E9E  5A1D               	subwfb	___lwmod@dividend+1,f,c
  3637  001EA0                     l1675:
  3638  001EA0  90D8               	bcf	status,0,c
  3639  001EA2  321F               	rrcf	___lwmod@divisor+1,f,c
  3640  001EA4  321E               	rrcf	___lwmod@divisor,f,c
  3641  001EA6  2E20               	decfsz	___lwmod@counter,f,c
  3642  001EA8  D7F1               	goto	l1671
  3643  001EAA                     l700:
  3644  001EAA  C01C  F01C         	movff	___lwmod@dividend,?___lwmod
  3645  001EAE  C01D  F01D         	movff	___lwmod@dividend+1,?___lwmod+1
  3646  001EB2  0012               	return		;funcret
  3647  001EB4                     __end_of___lwmod:
  3648                           	opt stack 0
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           intcon	equ	0xFF2
  3656                           intcon3	equ	0xFF0
  3657                           postinc0	equ	0xFEE
  3658                           wreg	equ	0xFE8
  3659                           indf2	equ	0xFDF
  3660                           postinc2	equ	0xFDE
  3661                           postdec2	equ	0xFDD
  3662                           fsr2h	equ	0xFDA
  3663                           fsr2l	equ	0xFD9
  3664                           status	equ	0xFD8
  3665                           
  3666 ;; *************** function ___lwdiv *****************
  3667 ;; Defined at:
  3668 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;  dividend        2   20[COMRAM] unsigned int 
  3671 ;;  divisor         2   22[COMRAM] unsigned int 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;  quotient        2   24[COMRAM] unsigned int 
  3674 ;;  counter         1   26[COMRAM] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  2   20[COMRAM] unsigned int 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3684 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;Total ram usage:        7 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    1
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_sort
  3695 ;;		_printf
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text17
  3700  001D44                     __ptext17:
  3701                           	opt stack 0
  3702  001D44                     ___lwdiv:
  3703                           	opt stack 27
  3704                           
  3705                           ;incstack = 0
  3706  001D44  0E00               	movlw	0
  3707  001D46  6E1A               	movwf	___lwdiv@quotient+1,c
  3708  001D48  0E00               	movlw	0
  3709  001D4A  6E19               	movwf	___lwdiv@quotient,c
  3710  001D4C  5017               	movf	___lwdiv@divisor,w,c
  3711  001D4E  1018               	iorwf	___lwdiv@divisor+1,w,c
  3712  001D50  B4D8               	btfsc	status,2,c
  3713  001D52  D01C               	goto	l690
  3714  001D54  0E01               	movlw	1
  3715  001D56  6E1B               	movwf	___lwdiv@counter,c
  3716  001D58  D004               	goto	l1649
  3717  001D5A                     l1647:
  3718  001D5A  90D8               	bcf	status,0,c
  3719  001D5C  3617               	rlcf	___lwdiv@divisor,f,c
  3720  001D5E  3618               	rlcf	___lwdiv@divisor+1,f,c
  3721  001D60  2A1B               	incf	___lwdiv@counter,f,c
  3722  001D62                     l1649:
  3723  001D62  AE18               	btfss	___lwdiv@divisor+1,7,c
  3724  001D64  D7FA               	goto	l1647
  3725  001D66                     l1651:
  3726  001D66  90D8               	bcf	status,0,c
  3727  001D68  3619               	rlcf	___lwdiv@quotient,f,c
  3728  001D6A  361A               	rlcf	___lwdiv@quotient+1,f,c
  3729  001D6C  5017               	movf	___lwdiv@divisor,w,c
  3730  001D6E  5C15               	subwf	___lwdiv@dividend,w,c
  3731  001D70  5018               	movf	___lwdiv@divisor+1,w,c
  3732  001D72  5816               	subwfb	___lwdiv@dividend+1,w,c
  3733  001D74  A0D8               	btfss	status,0,c
  3734  001D76  D005               	goto	l1659
  3735  001D78  5017               	movf	___lwdiv@divisor,w,c
  3736  001D7A  5E15               	subwf	___lwdiv@dividend,f,c
  3737  001D7C  5018               	movf	___lwdiv@divisor+1,w,c
  3738  001D7E  5A16               	subwfb	___lwdiv@dividend+1,f,c
  3739  001D80  8019               	bsf	___lwdiv@quotient,0,c
  3740  001D82                     l1659:
  3741  001D82  90D8               	bcf	status,0,c
  3742  001D84  3218               	rrcf	___lwdiv@divisor+1,f,c
  3743  001D86  3217               	rrcf	___lwdiv@divisor,f,c
  3744  001D88  2E1B               	decfsz	___lwdiv@counter,f,c
  3745  001D8A  D7ED               	goto	l1651
  3746  001D8C                     l690:
  3747  001D8C  C019  F015         	movff	___lwdiv@quotient,?___lwdiv
  3748  001D90  C01A  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3749  001D94  0012               	return		;funcret
  3750  001D96                     __end_of___lwdiv:
  3751                           	opt stack 0
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           intcon	equ	0xFF2
  3759                           intcon3	equ	0xFF0
  3760                           postinc0	equ	0xFEE
  3761                           wreg	equ	0xFE8
  3762                           indf2	equ	0xFDF
  3763                           postinc2	equ	0xFDE
  3764                           postdec2	equ	0xFDD
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _initLCD *****************
  3770 ;; Defined at:
  3771 ;;		line 15 in file "lcd.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;		None
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;Total ram usage:        1 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    3
  3792 ;; This function calls:
  3793 ;;		_lcdInst
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;;		_showLogMenu
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text18
  3801  001E2C                     __ptext18:
  3802                           	opt stack 0
  3803  001E2C                     _initLCD:
  3804                           	opt stack 26
  3805                           
  3806                           ;lcd.c: 16: _delay((unsigned long)((15)*(8000000/4000.0)));
  3807                           
  3808                           ;incstack = 0
  3809  001E2C  0E27               	movlw	39
  3810  001E2E  6E13               	movwf	??_initLCD& (0+255),c
  3811  001E30  0EF5               	movlw	245
  3812  001E32                     u2127:
  3813  001E32  2EE8               	decfsz	wreg,f,c
  3814  001E34  D7FE               	bra	u2127
  3815  001E36  2E13               	decfsz	??_initLCD& (0+255),f,c
  3816  001E38  D7FC               	bra	u2127
  3817  001E3A  F000               	nop	
  3818                           
  3819                           ;lcd.c: 17: lcdInst(0b00110011);
  3820  001E3C  0E33               	movlw	51
  3821  001E3E  ECBF  F00F         	call	_lcdInst
  3822                           
  3823                           ;lcd.c: 18: lcdInst(0b00110010);
  3824  001E42  0E32               	movlw	50
  3825  001E44  ECBF  F00F         	call	_lcdInst
  3826                           
  3827                           ;lcd.c: 19: lcdInst(0b00101000);
  3828  001E48  0E28               	movlw	40
  3829  001E4A  ECBF  F00F         	call	_lcdInst
  3830                           
  3831                           ;lcd.c: 20: lcdInst(0b00001111);
  3832  001E4E  0E0F               	movlw	15
  3833  001E50  ECBF  F00F         	call	_lcdInst
  3834                           
  3835                           ;lcd.c: 21: lcdInst(0b00000110);
  3836  001E54  0E06               	movlw	6
  3837  001E56  ECBF  F00F         	call	_lcdInst
  3838                           
  3839                           ;lcd.c: 22: lcdInst(0b00000001);
  3840  001E5A  0E01               	movlw	1
  3841  001E5C  ECBF  F00F         	call	_lcdInst
  3842                           
  3843                           ;lcd.c: 23: _delay((unsigned long)((15)*(8000000/4000.0)));
  3844  001E60  0E27               	movlw	39
  3845  001E62  6E13               	movwf	??_initLCD& (0+255),c
  3846  001E64  0EF5               	movlw	245
  3847  001E66                     u2137:
  3848  001E66  2EE8               	decfsz	wreg,f,c
  3849  001E68  D7FE               	bra	u2137
  3850  001E6A  2E13               	decfsz	??_initLCD& (0+255),f,c
  3851  001E6C  D7FC               	bra	u2137
  3852  001E6E  F000               	nop	
  3853  001E70  0012               	return		;funcret
  3854  001E72                     __end_of_initLCD:
  3855                           	opt stack 0
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           intcon	equ	0xFF2
  3863                           intcon3	equ	0xFF0
  3864                           postinc0	equ	0xFEE
  3865                           wreg	equ	0xFE8
  3866                           indf2	equ	0xFDF
  3867                           postinc2	equ	0xFDE
  3868                           postdec2	equ	0xFDD
  3869                           fsr2h	equ	0xFDA
  3870                           fsr2l	equ	0xFD9
  3871                           status	equ	0xFD8
  3872                           
  3873 ;; *************** function _lcdInst *****************
  3874 ;; Defined at:
  3875 ;;		line 26 in file "lcd.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  data            1    wreg     unsigned char 
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  data            1   17[COMRAM] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      void 
  3882 ;; Registers used:
  3883 ;;		wreg, status,2, status,0, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;Total ram usage:        1 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    2
  3896 ;; This function calls:
  3897 ;;		_lcdNibble
  3898 ;; This function is called by:
  3899 ;;		_initLCD
  3900 ;;		_sort
  3901 ;;		_displayLog
  3902 ;;		_showLogMenu
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text19
  3907  001F7E                     __ptext19:
  3908                           	opt stack 0
  3909  001F7E                     _lcdInst:
  3910                           	opt stack 27
  3911                           
  3912                           ;incstack = 0
  3913                           ;lcdInst@data stored from wreg
  3914  001F7E  6E12               	movwf	lcdInst@data,c
  3915                           
  3916                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  3917  001F80  948C               	bcf	3980,2,c	;volatile
  3918                           
  3919                           ;lcd.c: 28: lcdNibble(data);
  3920  001F82  5012               	movf	lcdInst@data,w,c
  3921  001F84  EC77  F00E         	call	_lcdNibble
  3922  001F88  0012               	return		;funcret
  3923  001F8A                     __end_of_lcdInst:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon3	equ	0xFF0
  3933                           postinc0	equ	0xFEE
  3934                           wreg	equ	0xFE8
  3935                           indf2	equ	0xFDF
  3936                           postinc2	equ	0xFDE
  3937                           postdec2	equ	0xFDD
  3938                           fsr2h	equ	0xFDA
  3939                           fsr2l	equ	0xFD9
  3940                           status	equ	0xFD8
  3941                           
  3942 ;; *************** function _putStr *****************
  3943 ;; Defined at:
  3944 ;;		line 36 in file "lcd.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  ptr             2   18[COMRAM] PTR unsigned char 
  3947 ;;		 -> STR_2(10), STR_1(16), 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3959 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;Total ram usage:        2 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    3
  3966 ;; This function calls:
  3967 ;;		_putch
  3968 ;; This function is called by:
  3969 ;;		_main
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           	psect	text20
  3974  001F16                     __ptext20:
  3975                           	opt stack 0
  3976  001F16                     _putStr:
  3977                           	opt stack 27
  3978                           
  3979                           ;lcd.c: 38: while(*ptr) putch (*(ptr++));
  3980                           
  3981                           ;incstack = 0
  3982  001F16  D00A               	goto	l1991
  3983  001F18                     l1987:
  3984  001F18  C013  FFF6         	movff	putStr@ptr,tblptrl
  3985  001F1C  C014  FFF7         	movff	putStr@ptr+1,tblptrh
  3986  001F20                     	if	0	;tblptru may be non-zero
  3987  001F20                     	endif
  3988  001F20                     	if	0	;tblptru may be non-zero
  3989  001F20                     	endif
  3990  001F20  0008               	tblrd		*
  3991  001F22  50F5               	movf	tablat,w,c
  3992  001F24  ECC5  F00F         	call	_putch
  3993  001F28  4A13               	infsnz	putStr@ptr,f,c
  3994  001F2A  2A14               	incf	putStr@ptr+1,f,c
  3995  001F2C                     l1991:
  3996  001F2C  C013  FFF6         	movff	putStr@ptr,tblptrl
  3997  001F30  C014  FFF7         	movff	putStr@ptr+1,tblptrh
  3998  001F34                     	if	0	;tblptru may be non-zero
  3999  001F34                     	endif
  4000  001F34                     	if	0	;tblptru may be non-zero
  4001  001F34                     	endif
  4002  001F34  0008               	tblrd		*
  4003  001F36  50F5               	movf	tablat,w,c
  4004  001F38  0900               	iorlw	0
  4005  001F3A  B4D8               	btfsc	status,2,c
  4006  001F3C  0012               	return	
  4007  001F3E  D7EC               	goto	l1987
  4008  001F40                     __end_of_putStr:
  4009                           	opt stack 0
  4010                           tblptru	equ	0xFF8
  4011                           tblptrh	equ	0xFF7
  4012                           tblptrl	equ	0xFF6
  4013                           tablat	equ	0xFF5
  4014                           prodh	equ	0xFF4
  4015                           prodl	equ	0xFF3
  4016                           intcon	equ	0xFF2
  4017                           intcon3	equ	0xFF0
  4018                           postinc0	equ	0xFEE
  4019                           wreg	equ	0xFE8
  4020                           indf2	equ	0xFDF
  4021                           postinc2	equ	0xFDE
  4022                           postdec2	equ	0xFDD
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027 ;; *************** function _putch *****************
  4028 ;; Defined at:
  4029 ;;		line 31 in file "lcd.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  data            1    wreg     unsigned char 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  data            1   17[COMRAM] unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;Total ram usage:        1 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    2
  4050 ;; This function calls:
  4051 ;;		_lcdNibble
  4052 ;; This function is called by:
  4053 ;;		_putStr
  4054 ;;		_showLogMenu
  4055 ;;		_printf
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           	psect	text21
  4060  001F8A                     __ptext21:
  4061                           	opt stack 0
  4062  001F8A                     _putch:
  4063                           	opt stack 26
  4064                           
  4065                           ;incstack = 0
  4066                           ;putch@data stored from wreg
  4067  001F8A  6E12               	movwf	putch@data,c
  4068                           
  4069                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4070  001F8C  848C               	bsf	3980,2,c	;volatile
  4071                           
  4072                           ;lcd.c: 33: lcdNibble(data);
  4073  001F8E  5012               	movf	putch@data,w,c
  4074  001F90  EC77  F00E         	call	_lcdNibble
  4075  001F94  0012               	return		;funcret
  4076  001F96                     __end_of_putch:
  4077                           	opt stack 0
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodh	equ	0xFF4
  4083                           prodl	equ	0xFF3
  4084                           intcon	equ	0xFF2
  4085                           intcon3	equ	0xFF0
  4086                           postinc0	equ	0xFEE
  4087                           wreg	equ	0xFE8
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           postdec2	equ	0xFDD
  4091                           fsr2h	equ	0xFDA
  4092                           fsr2l	equ	0xFD9
  4093                           status	equ	0xFD8
  4094                           
  4095 ;; *************** function _lcdNibble *****************
  4096 ;; Defined at:
  4097 ;;		line 41 in file "lcd.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  data            1    wreg     unsigned char 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  data            1   16[COMRAM] unsigned char 
  4102 ;;  temp            1   15[COMRAM] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;Total ram usage:        2 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    1
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_lcdInst
  4123 ;;		_putch
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text22
  4128  001CEE                     __ptext22:
  4129                           	opt stack 0
  4130  001CEE                     _lcdNibble:
  4131                           	opt stack 26
  4132                           
  4133                           ;incstack = 0
  4134                           ;lcdNibble@data stored from wreg
  4135  001CEE  6E11               	movwf	lcdNibble@data,c
  4136                           
  4137                           ;lcd.c: 43: char temp = data & 0xF0;
  4138  001CF0  5011               	movf	lcdNibble@data,w,c
  4139  001CF2  0BF0               	andlw	240
  4140  001CF4  6E10               	movwf	lcdNibble@temp,c
  4141                           
  4142                           ;lcd.c: 44: LATD = LATD & 0x0F;
  4143  001CF6  508C               	movf	3980,w,c	;volatile
  4144  001CF8  0B0F               	andlw	15
  4145  001CFA  6E8C               	movwf	3980,c	;volatile
  4146                           
  4147                           ;lcd.c: 45: LATD = temp | LATD;
  4148  001CFC  5010               	movf	lcdNibble@temp,w,c
  4149  001CFE  108C               	iorwf	3980,w,c	;volatile
  4150  001D00  6E8C               	movwf	3980,c	;volatile
  4151                           
  4152                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4153  001D02  968C               	bcf	3980,3,c	;volatile
  4154                           
  4155                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4156  001D04  0E10               	movlw	16
  4157  001D06                     u2147:
  4158  001D06  2EE8               	decfsz	wreg,f,c
  4159  001D08  D7FE               	bra	u2147
  4160  001D0A  D000               	nop2	
  4161                           
  4162                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4163  001D0C  868C               	bsf	3980,3,c	;volatile
  4164                           
  4165                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4166  001D0E  0E10               	movlw	16
  4167  001D10                     u2157:
  4168  001D10  2EE8               	decfsz	wreg,f,c
  4169  001D12  D7FE               	bra	u2157
  4170  001D14  D000               	nop2	
  4171                           
  4172                           ;lcd.c: 52: data = data << 4;
  4173  001D16  3811               	swapf	lcdNibble@data,w,c
  4174  001D18  0BF0               	andlw	240
  4175  001D1A  6E11               	movwf	lcdNibble@data,c
  4176                           
  4177                           ;lcd.c: 54: temp = data & 0xF0;
  4178  001D1C  5011               	movf	lcdNibble@data,w,c
  4179  001D1E  0BF0               	andlw	240
  4180  001D20  6E10               	movwf	lcdNibble@temp,c
  4181                           
  4182                           ;lcd.c: 55: LATD = LATD & 0x0F;
  4183  001D22  508C               	movf	3980,w,c	;volatile
  4184  001D24  0B0F               	andlw	15
  4185  001D26  6E8C               	movwf	3980,c	;volatile
  4186                           
  4187                           ;lcd.c: 56: LATD = temp | LATD;
  4188  001D28  5010               	movf	lcdNibble@temp,w,c
  4189  001D2A  108C               	iorwf	3980,w,c	;volatile
  4190  001D2C  6E8C               	movwf	3980,c	;volatile
  4191                           
  4192                           ;lcd.c: 58: LATDbits.LATD3 = 0;
  4193  001D2E  968C               	bcf	3980,3,c	;volatile
  4194                           
  4195                           ;lcd.c: 59: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4196  001D30  0E10               	movlw	16
  4197  001D32                     u2167:
  4198  001D32  2EE8               	decfsz	wreg,f,c
  4199  001D34  D7FE               	bra	u2167
  4200  001D36  D000               	nop2	
  4201                           
  4202                           ;lcd.c: 60: LATDbits.LATD3 = 1;
  4203  001D38  868C               	bsf	3980,3,c	;volatile
  4204                           
  4205                           ;lcd.c: 61: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4206  001D3A  0E10               	movlw	16
  4207  001D3C                     u2177:
  4208  001D3C  2EE8               	decfsz	wreg,f,c
  4209  001D3E  D7FE               	bra	u2177
  4210  001D40  D000               	nop2	
  4211  001D42  0012               	return		;funcret
  4212  001D44                     __end_of_lcdNibble:
  4213                           	opt stack 0
  4214                           tblptru	equ	0xFF8
  4215                           tblptrh	equ	0xFF7
  4216                           tblptrl	equ	0xFF6
  4217                           tablat	equ	0xFF5
  4218                           prodh	equ	0xFF4
  4219                           prodl	equ	0xFF3
  4220                           intcon	equ	0xFF2
  4221                           intcon3	equ	0xFF0
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           indf2	equ	0xFDF
  4225                           postinc2	equ	0xFDE
  4226                           postdec2	equ	0xFDD
  4227                           fsr2h	equ	0xFDA
  4228                           fsr2l	equ	0xFD9
  4229                           status	equ	0xFD8
  4230                           
  4231 ;; *************** function _keypressed *****************
  4232 ;; Defined at:
  4233 ;;		line 65 in file "main.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  keypress        1   14[COMRAM] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;Total ram usage:       15 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; This function calls:
  4254 ;;		Nothing
  4255 ;; This function is called by:
  4256 ;;		Interrupt level 2
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           	psect	intcode
  4261  000008                     __pintcode:
  4262                           	opt stack 0
  4263  000008                     _keypressed:
  4264                           	opt stack 25
  4265                           
  4266                           ;incstack = 0
  4267  000008  8269               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4268  00000A  EDB0  F00D         	call	int_func,f	;refresh shadow registers
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           intcon	equ	0xFF2
  4276                           intcon3	equ	0xFF0
  4277                           postinc0	equ	0xFEE
  4278                           wreg	equ	0xFE8
  4279                           indf2	equ	0xFDF
  4280                           postinc2	equ	0xFDE
  4281                           postdec2	equ	0xFDD
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286                           	psect	intcode_body
  4287  001B60                     __pintcode_body:
  4288                           	opt stack 25
  4289  001B60                     int_func:
  4290                           	opt stack 25
  4291  001B60  0006               	pop		; remove dummy address from shadow register refresh
  4292  001B62  CFFA F001          	movff	pclath,??_keypressed
  4293  001B66  CFFB F002          	movff	pclatu,??_keypressed+1
  4294  001B6A  CFE9 F003          	movff	fsr0l,??_keypressed+2
  4295  001B6E  CFEA F004          	movff	fsr0h,??_keypressed+3
  4296  001B72  CFE1 F005          	movff	fsr1l,??_keypressed+4
  4297  001B76  CFE2 F006          	movff	fsr1h,??_keypressed+5
  4298  001B7A  CFD9 F007          	movff	fsr2l,??_keypressed+6
  4299  001B7E  CFDA F008          	movff	fsr2h,??_keypressed+7
  4300  001B82  CFF3 F009          	movff	prodl,??_keypressed+8
  4301  001B86  CFF4 F00A          	movff	prodh,??_keypressed+9
  4302  001B8A  CFF6 F00B          	movff	tblptrl,??_keypressed+10
  4303  001B8E  CFF7 F00C          	movff	tblptrh,??_keypressed+11
  4304  001B92  CFF8 F00D          	movff	tblptru,??_keypressed+12
  4305  001B96  CFF5 F00E          	movff	tablat,??_keypressed+13
  4306                           
  4307                           ;main.c: 66: if (INT1IF) {
  4308  001B9A  A0F0               	btfss	intcon3,0,c	;volatile
  4309  001B9C  D012               	goto	i2l60
  4310                           
  4311                           ;main.c: 67: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4312  001B9E  3881               	swapf	3969,w,c	;volatile
  4313  001BA0  0B0F               	andlw	15
  4314  001BA2  0B0F               	andlw	15
  4315  001BA4  6E0F               	movwf	keypressed@keypress,c
  4316                           
  4317                           ;main.c: 68: if (keys[keypress] == '0') {
  4318  001BA6  500F               	movf	keypressed@keypress,w,c
  4319  001BA8  0D01               	mullw	1
  4320  001BAA  0E01               	movlw	low _keys
  4321  001BAC  24F3               	addwf	prodl,w,c
  4322  001BAE  6EF6               	movwf	tblptrl,c
  4323  001BB0  0E10               	movlw	high _keys
  4324  001BB2  20F4               	addwfc	prodh,w,c
  4325  001BB4  6EF7               	movwf	tblptrh,c
  4326  001BB6                     	if	0	;There are less than 3 active tblptr bytes
  4327  001BB6                     	endif
  4328  001BB6  0008               	tblrd		*
  4329  001BB8  50F5               	movf	tablat,w,c
  4330  001BBA  0A30               	xorlw	48
  4331  001BBC  B4D8               	btfsc	status,2,c
  4332  001BBE  00FF               	reset		;# 
  4333                           
  4334                           ;main.c: 72: }
  4335                           ;main.c: 73: INT1IF = 0;
  4336  001BC0  90F0               	bcf	intcon3,0,c	;volatile
  4337  001BC2                     i2l60:
  4338  001BC2  C00E  FFF5         	movff	??_keypressed+13,tablat
  4339  001BC6  C00D  FFF8         	movff	??_keypressed+12,tblptru
  4340  001BCA  C00C  FFF7         	movff	??_keypressed+11,tblptrh
  4341  001BCE  C00B  FFF6         	movff	??_keypressed+10,tblptrl
  4342  001BD2  C00A  FFF4         	movff	??_keypressed+9,prodh
  4343  001BD6  C009  FFF3         	movff	??_keypressed+8,prodl
  4344  001BDA  C008  FFDA         	movff	??_keypressed+7,fsr2h
  4345  001BDE  C007  FFD9         	movff	??_keypressed+6,fsr2l
  4346  001BE2  C006  FFE2         	movff	??_keypressed+5,fsr1h
  4347  001BE6  C005  FFE1         	movff	??_keypressed+4,fsr1l
  4348  001BEA  C004  FFEA         	movff	??_keypressed+3,fsr0h
  4349  001BEE  C003  FFE9         	movff	??_keypressed+2,fsr0l
  4350  001BF2  C002  FFFB         	movff	??_keypressed+1,pclatu
  4351  001BF6  C001  FFFA         	movff	??_keypressed,pclath
  4352  001BFA  9269               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4353  001BFC  0011               	retfie		f
  4354  001BFE                     __end_of_keypressed:
  4355                           	opt stack 0
  4356                           pclatu	equ	0xFFB
  4357                           pclath	equ	0xFFA
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           prodh	equ	0xFF4
  4363                           prodl	equ	0xFF3
  4364                           intcon	equ	0xFF2
  4365                           intcon3	equ	0xFF0
  4366                           postinc0	equ	0xFEE
  4367                           fsr0h	equ	0xFEA
  4368                           fsr0l	equ	0xFE9
  4369                           wreg	equ	0xFE8
  4370                           fsr1h	equ	0xFE2
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           pclatu	equ	0xFFB
  4379                           pclath	equ	0xFFA
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           prodh	equ	0xFF4
  4385                           prodl	equ	0xFF3
  4386                           intcon	equ	0xFF2
  4387                           intcon3	equ	0xFF0
  4388                           postinc0	equ	0xFEE
  4389                           fsr0h	equ	0xFEA
  4390                           fsr0l	equ	0xFE9
  4391                           wreg	equ	0xFE8
  4392                           fsr1h	equ	0xFE2
  4393                           fsr1l	equ	0xFE1
  4394                           indf2	equ	0xFDF
  4395                           postinc2	equ	0xFDE
  4396                           postdec2	equ	0xFDD
  4397                           fsr2h	equ	0xFDA
  4398                           fsr2l	equ	0xFD9
  4399                           status	equ	0xFD8
  4400                           
  4401                           	psect	rparam
  4402  0000                     pclatu	equ	0xFFB
  4403                           pclath	equ	0xFFA
  4404                           tblptru	equ	0xFF8
  4405                           tblptrh	equ	0xFF7
  4406                           tblptrl	equ	0xFF6
  4407                           tablat	equ	0xFF5
  4408                           prodh	equ	0xFF4
  4409                           prodl	equ	0xFF3
  4410                           intcon	equ	0xFF2
  4411                           intcon3	equ	0xFF0
  4412                           postinc0	equ	0xFEE
  4413                           fsr0h	equ	0xFEA
  4414                           fsr0l	equ	0xFE9
  4415                           wreg	equ	0xFE8
  4416                           fsr1h	equ	0xFE2
  4417                           fsr1l	equ	0xFE1
  4418                           indf2	equ	0xFDF
  4419                           postinc2	equ	0xFDE
  4420                           postdec2	equ	0xFDD
  4421                           fsr2h	equ	0xFDA
  4422                           fsr2l	equ	0xFD9
  4423                           status	equ	0xFD8
  4424                           
  4425                           	psect	temp
  4426  000069                     btemp:
  4427                           	opt stack 0
  4428  000069                     	ds	1
  4429  0000                     int$flags	set	btemp
  4430                           pclatu	equ	0xFFB
  4431                           pclath	equ	0xFFA
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           intcon3	equ	0xFF0
  4440                           postinc0	equ	0xFEE
  4441                           fsr0h	equ	0xFEA
  4442                           fsr0l	equ	0xFE9
  4443                           wreg	equ	0xFE8
  4444                           fsr1h	equ	0xFE2
  4445                           fsr1l	equ	0xFE1
  4446                           indf2	equ	0xFDF
  4447                           postinc2	equ	0xFDE
  4448                           postdec2	equ	0xFDD
  4449                           fsr2h	equ	0xFDA
  4450                           fsr2l	equ	0xFD9
  4451                           status	equ	0xFD8


Data Sizes:
    Strings     80
    Constant    33
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     94     104
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_9(CODE[5]), STR_8(CODE[9]), STR_7(CODE[9]), STR_6(CODE[21]), 
		 -> STR_5(CODE[17]), STR_4(CODE[2]), STR_3(CODE[21]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    putStr@ptr	PTR unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[10]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_sort
    _sort->_ultrasonicFindBottle
    _ultrasonicFindBottle->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _displayLog->_printf
    ___lwtoft->___lwdiv
    ___ftmul->___lwtoft
    _showLogMenu->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->_ADC_Read
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _putStr->_putch
    _putch->_lcdNibble

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   18974
                                             93 COMRAM     1     1      0
                            _initLCD
                             _putStr
                        _showLogMenu
                               _sort
 ---------------------------------------------------------------------------------
 (1) _sort                                                28    28      0   16143
                                             65 COMRAM    28    28      0
                           _ADC_Read
                             ___ftge
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
                         _displayLog
                            _lcdInst
                             _printf
                        _resetCounts
                             _rotate
               _ultrasonicFindBottle
 ---------------------------------------------------------------------------------
 (2) _ultrasonicFindBottle                                 8     6      2    5235
                                             57 COMRAM     8     6      2
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     316
                                             42 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2580
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2225
                                             23 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _rotate                                               7     5      2     156
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _resetCounts                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayLog                                          10     0     10    2323
                                             50 COMRAM    10     0     10
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2220
                                             27 COMRAM     3     0      3
                           _ADC_Read (ARG)
                           ___ftpack
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2754
                                             30 COMRAM    15     9      6
                           _ADC_Read (ARG)
                           ___ftpack
                            ___lwdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     392
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             5     3      2      44
                                             15 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _showLogMenu                                          8     8      0    2433
                                             50 COMRAM     8     8      0
                            _initLCD
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _printf                                              27    17     10    1803
                                             32 COMRAM    18     8     10
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             27 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     546
                                             20 COMRAM     7     3      4
                           _ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      90
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _putStr                                               2     0      2     263
                                             18 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      90
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      75
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          15    15      0      15
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _putStr
     _putch
       _lcdNibble
   _showLogMenu
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
         _ADC_Read (ARG)
       ___lwmod
         ___lwdiv (ARG)
           _ADC_Read (ARG)
       _putch
         _lcdNibble
     _putch
       _lcdNibble
   _sort
     _ADC_Read
     ___ftge
     ___ftmul
       _ADC_Read (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         _ADC_Read (ARG)
       ___lwtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           _ADC_Read (ARG)
     ___lwdiv
       _ADC_Read (ARG)
     ___lwtoft
       _ADC_Read (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         _ADC_Read (ARG)
     _displayLog
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
           _ADC_Read (ARG)
         ___lwmod
           ___lwdiv (ARG)
             _ADC_Read (ARG)
         _putch
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
         _ADC_Read (ARG)
       ___lwmod
         ___lwdiv (ARG)
           _ADC_Read (ARG)
       _putch
         _lcdNibble
     _resetCounts
     _rotate
     _ultrasonicFindBottle
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5E      68       1       82.5%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      68       6        0.0%
DATA                 0      0      68       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 28 14:44:50 2017

__size_of_ultrasonicFindBottle 00EE                             l44 1AF2                             l47 1AFE  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                    __CFG_OSC$HS 000000  
                          l206 13CE                            l151 1898                            l162 1CEC  
                          l146 1888                            l235 146C                            l236 1472  
                          l149 192A                            l181 1142                            l239 147E  
                          l167 1E14                            l159 1CCA                            l512 1AA0  
                          l184 116C                            l177 1100                            l700 1EAA  
                          l199 1364                            l570 19E0                            l690 1D8C  
                 __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000          ultrasonicFindBottle@a 0040  
                          wreg 000FE8                   __CFG_LVP$OFF 000000                   ___ftdiv@cntr 0025  
                 ___ftdiv@sign 002A                   __CFG_WDT$OFF 000000                           l2021 10EC  
                         l2031 110E                           l2007 10C0                           l2201 14F8  
                         l2041 112E                           l2017 10E4                           l2051 1158  
                         l2035 1122                           l2027 1106                           l2141 139A  
                         l2109 131A                           l2037 1126                           l2151 13BA  
                         l2119 134C                           l2047 1150                           l2215 1AE2  
                         l2145 13AE                           l2137 1392                           l2073 1270  
                         l2065 11F4                           l2057 1178                           l2241 1B5C  
                         l2233 1B38                           l2171 1456                           l2147 13B2  
                         l2059 1180                           l2157 13E2                           l1621 1A6E  
                         l1613 1A30                           l2093 12C2                           l2191 14C6  
                         l2175 1466                           l1623 1A8C                           l1615 1A3A  
                         l1721 15D4                           l2169 144A                           l1625 1A96  
                         l1617 1A58                           l1609 1A22                           l2089 12AE  
                         l1651 1D66                           l1731 1634                           l1707 15A4  
                         l2187 14B4                           l2099 12EA                           l1725 15E6  
                         l1709 15A8                           l1733 163C                           l2197 14E0  
                         l1741 1954                           l1821 16F8                           l1647 1D5A  
                         l1671 1E8C                           l1727 15EC                           l1831 1722  
                         l1649 1D62                           l1681 151E                           l1921 1772  
                         l1817 16E8                           l1659 1D82                           l1675 1EA0  
                         l1667 1E80                           l1691 1548                           l1747 197C  
                         l1835 1738                           l1827 1710                           l1851 1856  
                         l1669 1E88                           l1685 152E                           l1941 17CC  
                         l1829 171C                           l1687 1534                           l1695 1550  
                         l1951 17F4                           l1927 179A                           l1767 19BA  
                         l1871 1920                           l1697 157C                           l1945 17DC  
                         l1971 1C5E                           l1955 1804                           l1885 1CBE  
                         l1877 1C96                           l1789 1EC8                           l1991 1F2C  
                         l1967 1C2E                           l1799 1682                           l1977 1C8A  
                         l1987 1F18                           l1899 1DF6                           l1999 108A  
                         STR_1 1048                           STR_2 1058                           STR_3 1022  
                         STR_4 1070                           STR_5 1037                           STR_6 1022  
                         STR_7 1062                           STR_8 1062                           STR_9 106B  
                         u1300 16A0                           u1221 193C                           u2007 115E  
                         u1241 1964                           u1305 1698                           u2017 132E  
                         u2107 1CDE                           u2027 133E                           u2117 1E08  
                         u2037 136C                           u2127 1E32                           u2047 137E  
                         u1360 187E                           _LATD 000F8C                           u2137 1E66  
                         u1281 1666                           u2057 13A0                           u2147 1D06  
                         u2067 13C0                           u2157 1D10                           u1461 175A  
                         u2077 1842                           u1390 1910                           u2167 1D32  
                         u2087 1CAA                           u2177 1D3C                           u1481 1782  
                         u2097 1CC0                           u1740 1362                           u1750 1390  
                         u1977 10F2                           u1987 1114                           u1997 1134  
                         i2l60 1BC2                           _main 1AC0                   ___ftpack@arg 0010  
                         _keys 1001                   ___ftpack@exp 0013                           _time 0063  
                         fsr0h 000FEA                           fsr1h 000FE2                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           _sort 1074                           btemp 0069  
             __end_of_ADC_Read 1E2C                           prodh 000FF4                           prodl 000FF3  
                         start 000E                  __CFG_IESO$OFF 000000                  __CFG_MCLRE$ON 000000  
                 ___ftmul@cntr 002C                   ___param_bank 000000                   ___ftmul@sign 002D  
                 ___fttol@exp1 0039                   ___fttol@lval 0035                          ?_main 0001  
              __end_of___ftdiv 1A12                          ?_sort 0001                __end_of___ftmul 183E  
                        _T0CON 000FD5                          _T1CON 000FCD                __end_of___fttol 174A  
              __end_of___lwdiv 1D96                __end_of___lwmod 1EB4                          _TMR0H 000FD7  
                        _TMR1H 000FCF                          _TMR0L 000FD6                          _TMR1L 000FCE  
                        _PORTB 000F81                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                          _TRISE 000F96  
                __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                __end_of_lcdInst 1F8A  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                   main@keypress 005E                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
           showLogMenu@pointer 0037                __end_of_initLCD 1E72                 __CFG_EBTRB$OFF 000000  
                ___awtoft@sign 001B             showLogMenu@topItem 0039                __end_of_dpowers 101C  
                ___ftpack@sign 0014                          _putch 1F8A                          pclath 000FFA  
                        tablat 000FF5                          sort@i 0054                          status 000FD8  
               __CFG_PBADEN$ON 000000                __initialization 1F64                   __end_of_main 1B60  
                 __end_of_keys 1012                   __end_of_sort 13D2                   rotate@degree 0010  
                       ??_main 005E                  ___fttol@sign1 0034                         ??_sort 0042  
                __activetblptr 000002                         _ADCON0 000FC2                         _ADCON1 000FC1  
                       _ADRESH 000FC4                         _ADRESL 000FC3               __end_of___awtoft 1EEC  
                       ?_putch 0001               __end_of___ftpack 1AC0                         _INT1IE 007F83  
                       _INT1IF 007F80               __end_of___lwtoft 1F64                   ?_resetCounts 0001  
                       _TMR0ON 007EAF                         _TMR1ON 007E68                 __CFG_XINST$OFF 000000  
                 sort@proxVolt 0048                         ___ftge 1BFE                 __CFG_STVREN$ON 000000  
                    ??___ftdiv 0022                      ??___ftmul 0025                      ??___fttol 002F  
                    ??___lwdiv 0019                      ??___lwmod 0020                ADC_Read@channel 0014  
                       clear_0 1F6A                      ??_lcdInst 0012                         _printf 1514  
                       _putStr 1F16                         _rotate 1C8E                         _yopCap 0065  
                 ?_showLogMenu 0001          ___ftmul@f3_as_product 0029                      ??_initLCD 0013  
                    ?_ADC_Read 0010                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                     __accesstop 0080  
      __end_of__initialization 1F70                     ___ftge@ff1 0010                     ___ftge@ff2 0013  
                ___rparam_used 000001                     ___ftdiv@f1 001C                     ___ftdiv@f2 001F  
                   ___ftdiv@f3 0026                     ___awtoft@c 0018                     ___ftmul@f1 001F  
                   ___ftmul@f2 0022                     ___fttol@f1 002B                 __pcstackCOMRAM 0001  
             showLogMenu@temp2 0036                  __end_of_putch 1F96                     ___lwtoft@c 001C  
           __size_of_lcdNibble 0056                     ??_ADC_Read 0012   __end_of_ultrasonicFindBottle 192C  
                      ??_putch 0012                        ?___ftge 0010                      ?___awtoft 0018  
                    ?___ftpack 0010                        ?_printf 0021                        ?_putStr 0013  
                      ?_rotate 0010                  sort@lightVolt 004B                      ?___lwtoft 001C  
            displayLog@eskaCap 0033                     _displayLog 1D96              __end_of_lcdNibble 1D44  
         __size_of_resetCounts 002A                        __Hparam 0000                        __Lparam 0000  
              __size_of___ftge 0090                        ___ftdiv 192C                        ___ftmul 174A  
                      ___fttol 1656                        ___lwdiv 1D44                        ___lwmod 1E72  
                 __psmallconst 1000                sort@lightSensor 004E                        __pcinit 1F64  
                   ??___awtoft 001B                     ??___ftpack 0015                        __ramtop 1000  
                      _lcdInst 1F7E                        __ptext0 1AC0                        __ptext1 1074  
                      __ptext2 183E                        __ptext3 1656                        __ptext4 192C  
                      __ptext5 1EB4                        __ptext6 1C8E                        __ptext7 1EEC  
                      __ptext8 1D96                        __ptext9 1F40                __size_of_printf 0142  
                      _eskaCap 005F                __size_of_putStr 002A                __size_of_rotate 0060  
                   ??___lwtoft 001F                 displayLog@time 003B                        _initLCD 1E2C  
                      _dpowers 1012              __end_of_itemArray 1022           __size_of_showLogMenu 0142  
                   _keypressed 0008                 __pintcode_body 1B60           end_of_initialization 1F70  
          displayLog@eskaNoCap 0035                sort@microswitch 0050                  __Lmediumconst 0000  
                      int_func 1B60                        printf@c 0032                        printf@f 0021  
                      postdec2 000FDD           _ultrasonicFindBottle 183E                        postinc0 000FEE  
                      postinc2 000FDE                        rotate@i 0015                        rotate@j 0013  
                    _PORTAbits 000F80                      _PORTBbits 000F81                    ?_displayLog 0033  
            __size_of_ADC_Read 0048                    ___ftdiv@exp 0029                    ___ftmul@exp 0028  
        ?_ultrasonicFindBottle 003A                 __end_of___ftge 1C8E              showLogMenu@press1 0035  
               __end_of_printf 1656                 __end_of_putStr 1F40                 __end_of_rotate 1CEE  
          start_initialization 1F64                    ?_keypressed 0001           sort@currentContainer 0046  
                     ??___ftge 0016            __size_of_displayLog 004E               __CFG_LPT1OSC$OFF 000000  
                     ??_printf 002B                       ??_putStr 0015                       ??_rotate 0012  
            __size_of___awtoft 0038              __size_of___ftpack 00AE                    __pbssCOMRAM 005F  
            __size_of___lwtoft 0024         ??_ultrasonicFindBottle 003C               ___lwdiv@dividend 0015  
            __CFG_CCP2MX$PORTC 000000            __size_of_keypressed 1BF6                      __pintcode 0008  
                    _lcdNibble 1CEE                       ?___ftdiv 001C                       ?___ftmul 001F  
                     ?___fttol 002B                       ?___lwdiv 0015                       ?___lwmod 001C  
                     ?_lcdInst 0001                      _eskaNoCap 0061               displayLog@yopCap 0037  
                     ?_initLCD 0001                    __smallconst 1000                       _ADC_Read 1DE4  
             ___lwdiv@quotient 0019                      _itemArray 101C                 __size_of_putch 000C  
                ??_resetCounts 0010                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C               __CFG_WDTPS$32768 000000                     ?_lcdNibble 0001  
                ??_showLogMenu 0033                     _ADCON0bits 000FC2                  lcdNibble@data 0011  
                   printf@flag 002C                  lcdNibble@temp 0010                     printf@prec 002D  
           displayLog@yopNoCap 0039                   ??_displayLog 003D             keypressed@keypress 000F  
                   sort@bottle 005A                       __Hrparam 0000                 sort@proxSensor 0052  
                     __Lrparam 0000            __end_of_resetCounts 1F16             __CFG_BOREN$SBORDIS 000000  
             __size_of___ftdiv 00E6             __end_of_displayLog 1DE4               __size_of___ftmul 00F4  
             __size_of___fttol 00F4               __size_of___lwdiv 0052               __size_of___lwmod 0042  
                     ___awtoft 1EB4                       ___ftpack 1A12                       ___lwtoft 1F40  
             __size_of_lcdInst 000C               __size_of_initLCD 0046                   ??_keypressed 0001  
              ___lwdiv@divisor 0017                ___lwdiv@counter 001B                       __ptext10 174A  
                     __ptext11 1A12                       __ptext20 1F16                       __ptext12 1BFE  
                     __ptext21 1F8A                       __ptext13 1DE4                       __ptext22 1CEE  
                     __ptext14 13D2                       __ptext15 1514                       __ptext16 1E72  
                     __ptext17 1D44                       __ptext18 1E2C                       __ptext19 1F7E  
          __end_of_showLogMenu 1514                  __size_of_main 00A0                  __size_of_sort 035E  
                  ??_lcdNibble 0010             __end_of_keypressed 1BFE                       int$flags 0069  
                    printf@val 0030                       _yopNoCap 0067                      sort@i_640 0058  
                    sort@i_624 0055                      sort@i_641 0059                      sort@i_625 0056  
                    sort@i_634 0057                      sort@i_639 005C                      putStr@ptr 0013  
                    putch@data 0012                     _INTCONbits 000FF2                       intlevel2 0000  
             ___lwmod@dividend 001C                    _resetCounts 1EEC                       printf@ap 002E  
                  lcdInst@data 0012                    _showLogMenu 13D2                ___lwmod@divisor 001E  
              ___lwmod@counter 0020  
